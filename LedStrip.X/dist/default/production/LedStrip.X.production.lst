

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Apr 25 15:32:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	idataCOMRAM
    33  00167A                     __pidataCOMRAM:
    34                           	opt stack 0
    35                           
    36                           ;initializer for _B
    37  00167A  000A               	dw	10
    38                           
    39                           ;initializer for _G
    40  00167C  000A               	dw	10
    41                           
    42                           ;initializer for _R
    43  00167E  000A               	dw	10
    44                           
    45                           	psect	smallconst
    46  000F00                     __psmallconst:
    47                           	opt stack 0
    48  000F00  00                 	db	0
    49  000F01                     _dpowers:
    50                           	opt stack 0
    51  000F01  0001               	dw	1
    52  000F03  000A               	dw	10
    53  000F05  0064               	dw	100
    54  000F07  03E8               	dw	1000
    55  000F09  2710               	dw	10000
    56  000F0B                     __end_of_dpowers:
    57                           	opt stack 0
    58  0000                     _CCPR2L	set	3921
    59  0000                     _CCPR3L	set	3918
    60  0000                     _CCPR4L	set	3915
    61  0000                     _ANSEL1	set	31465
    62  0000                     _ANSEL2	set	31466
    63  0000                     _ANSEL3	set	31467
    64  0000                     _CCP2M2	set	31362
    65  0000                     _CCP2M3	set	31363
    66  0000                     _CCP3M2	set	31338
    67  0000                     _CCP3M3	set	31339
    68  0000                     _CCP4M2	set	31314
    69  0000                     _CCP4M3	set	31315
    70  0000                     _DC2B0	set	31364
    71  0000                     _DC2B1	set	31365
    72  0000                     _DC3B0	set	31340
    73  0000                     _DC3B1	set	31341
    74  0000                     _DC4B0	set	31316
    75  0000                     _DC4B1	set	31317
    76  0000                     _ADRESH	set	4036
    77  0000                     _ADRESL	set	4035
    78  0000                     _BAUDCON2	set	4025
    79  0000                     _INTCONbits	set	4082
    80  0000                     _PIE3bits	set	4003
    81  0000                     _PIR3bits	set	4004
    82  0000                     _PR2	set	4043
    83  0000                     _RCONbits	set	4048
    84  0000                     _RCREG2	set	3962
    85  0000                     _RCSTA2bits	set	4006
    86  0000                     _SPBRG2	set	3963
    87  0000                     _SPBRGH2	set	3964
    88  0000                     _TRISBbits	set	3987
    89  0000                     _TRISC	set	3988
    90  0000                     _TXREG2	set	3961
    91  0000                     _TXSTA2bits	set	4026
    92  0000                     _ADON	set	32272
    93  0000                     _CHS0	set	32274
    94  0000                     _CHS1	set	32275
    95  0000                     _GO_nDONE	set	32273
    96  0000                     _RC2IF	set	32037
    97  0000                     _T2CKPS0	set	32336
    98  0000                     _T2CKPS1	set	32337
    99  0000                     _TMR2ON	set	32338
   100  0000                     _TRIGSEL0	set	32270
   101  0000                     _TRIGSEL1	set	32271
   102  0000                     _VCFG0	set	32268
   103  0000                     _VCFG1	set	32269
   104  0000                     _VNCFG	set	32267
   105  000F0B                     STR_1:
   106  000F0B  25                 	db	37
   107  000F0C  75                 	db	117	;'u'
   108  000F0D  0A                 	db	10
   109  000F0E  0D                 	db	13
   110  000F0F  00                 	db	0
   111  0000                     
   112                           ; #config settings
   113  000F10  00                 	db	0	; dummy byte at the end
   114  0000                     
   115                           	psect	cinit
   116  00159C                     __pcinit:
   117                           	opt stack 0
   118  00159C                     start_initialization:
   119                           	opt stack 0
   120  00159C                     __initialization:
   121                           	opt stack 0
   122                           
   123                           ; Clear objects allocated to BANK0 (48 bytes)
   124  00159C  EE00  F09F         	lfsr	0,__pbssBANK0
   125  0015A0  0E30               	movlw	48
   126  0015A2                     clear_0:
   127  0015A2  6AEE               	clrf	postinc0,c
   128  0015A4  06E8               	decf	wreg,f,c
   129  0015A6  E1FD               	bnz	clear_0
   130                           
   131                           ; Clear objects allocated to COMRAM (22 bytes)
   132  0015A8  EE00  F024         	lfsr	0,__pbssCOMRAM
   133  0015AC  0E16               	movlw	22
   134  0015AE                     clear_1:
   135  0015AE  6AEE               	clrf	postinc0,c
   136  0015B0  06E8               	decf	wreg,f,c
   137  0015B2  E1FD               	bnz	clear_1
   138                           
   139                           ; Initialize objects allocated to COMRAM (6 bytes)
   140                           ; load TBLPTR registers with __pidataCOMRAM
   141  0015B4  0E7A               	movlw	low __pidataCOMRAM
   142  0015B6  6EF6               	movwf	tblptrl,c
   143  0015B8  0E16               	movlw	high __pidataCOMRAM
   144  0015BA  6EF7               	movwf	tblptrh,c
   145  0015BC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   146  0015BE  6EF8               	movwf	tblptru,c
   147  0015C0  EE00  F03A         	lfsr	0,__pdataCOMRAM
   148  0015C4  EE10 F006          	lfsr	1,6
   149  0015C8                     copy_data0:
   150  0015C8  0009               	tblrd		*+
   151  0015CA  CFF5 FFEE          	movff	tablat,postinc0
   152  0015CE  50E5               	movf	postdec1,w,c
   153  0015D0  50E1               	movf	fsr1l,w,c
   154  0015D2  E1FA               	bnz	copy_data0
   155  0015D4                     end_of_initialization:
   156                           	opt stack 0
   157  0015D4                     __end_of__initialization:
   158                           	opt stack 0
   159  0015D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   160  0015D6  6EF8               	movwf	tblptru,c
   161  0015D8  0100               	movlb	0
   162  0015DA  EF3D  F008         	goto	_main	;jump to C main() function
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           postdec1	equ	0xFE5
   170                           fsr1l	equ	0xFE1
   171                           
   172                           	psect	bssCOMRAM
   173  000024                     __pbssCOMRAM:
   174                           	opt stack 0
   175  000024                     high_isr@F19158:
   176                           	opt stack 0
   177  000024                     	ds	2
   178  000026                     _beginB:
   179                           	opt stack 0
   180  000026                     	ds	1
   181  000027                     _beginG:
   182                           	opt stack 0
   183  000027                     	ds	1
   184  000028                     _beginR:
   185                           	opt stack 0
   186  000028                     	ds	1
   187  000029                     _compteur:
   188                           	opt stack 0
   189  000029                     	ds	1
   190  00002A                     _buffer:
   191                           	opt stack 0
   192  00002A                     	ds	16
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           postdec1	equ	0xFE5
   200                           fsr1l	equ	0xFE1
   201                           
   202                           	psect	dataCOMRAM
   203  00003A                     __pdataCOMRAM:
   204                           	opt stack 0
   205  00003A                     _B:
   206                           	opt stack 0
   207  00003A                     	ds	2
   208  00003C                     _G:
   209                           	opt stack 0
   210  00003C                     	ds	2
   211  00003E                     _R:
   212                           	opt stack 0
   213  00003E                     	ds	2
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssBANK0
   224  00009F                     __pbssBANK0:
   225                           	opt stack 0
   226  00009F                     main@F19164:
   227                           	opt stack 0
   228  00009F                     	ds	32
   229  0000BF                     _buffer1:
   230                           	opt stack 0
   231  0000BF                     	ds	16
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	cstackBANK0
   242  000060                     __pcstackBANK0:
   243                           	opt stack 0
   244  000060                     ??_readADC:
   245  000060                     ?___lwdiv:
   246                           	opt stack 0
   247  000060                     ___lwdiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x0
   251  000060                     	ds	2
   252  000062                     readADC@channel:
   253                           	opt stack 0
   254  000062                     ___lwdiv@divisor:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x2
   258  000062                     	ds	1
   259  000063                     readADC@tempo:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x3
   263  000063                     	ds	1
   264  000064                     ?___lwmod:
   265                           	opt stack 0
   266  000064                     ___lwmod@dividend:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x4
   270  000064                     	ds	2
   271  000066                     ___lwmod@divisor:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x6
   275  000066                     	ds	2
   276  000068                     ___lwmod@counter:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x8
   280  000068                     	ds	1
   281  000069                     ?_sprintf:
   282                           	opt stack 0
   283  000069                     sprintf@sp:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x9
   287  000069                     	ds	2
   288  00006B                     sprintf@f:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0xB
   292  00006B                     	ds	4
   293  00006F                     sprintf@flag:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0xF
   297  00006F                     	ds	1
   298  000070                     sprintf@ap:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x10
   302  000070                     	ds	2
   303  000072                     sprintf@val:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x12
   307  000072                     	ds	2
   308  000074                     sprintf@prec:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x14
   312  000074                     	ds	1
   313  000075                     sprintf@c:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x15
   317  000075                     	ds	1
   318  000076                     
   319                           ; 2 bytes @ 0x16
   320  000076                     	ds	2
   321  000078                     
   322                           ; 3 bytes @ 0x18
   323  000078                     	ds	3
   324  00007B                     main@msg:
   325                           	opt stack 0
   326                           
   327                           ; 32 bytes @ 0x1B
   328  00007B                     	ds	32
   329  00009B                     main@delay:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x3B
   333  00009B                     	ds	4
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	cstackCOMRAM
   344  000001                     __pcstackCOMRAM:
   345                           	opt stack 0
   346  000001                     ??_isdigit:
   347  000001                     ?___wmul:
   348                           	opt stack 0
   349  000001                     ?___awdiv:
   350                           	opt stack 0
   351  000001                     ___wmul@multiplier:
   352                           	opt stack 0
   353  000001                     ___awdiv@dividend:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x0
   357  000001                     	ds	1
   358  000002                     _isdigit$878:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x1
   362  000002                     	ds	1
   363  000003                     isdigit@c:
   364                           	opt stack 0
   365  000003                     ___wmul@multiplicand:
   366                           	opt stack 0
   367  000003                     ___awdiv@divisor:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371  000003                     	ds	2
   372  000005                     ___awdiv@counter:
   373                           	opt stack 0
   374  000005                     ___wmul@product:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x4
   378  000005                     	ds	1
   379  000006                     ___awdiv@sign:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x5
   383  000006                     	ds	1
   384  000007                     ?_atoi:
   385                           	opt stack 0
   386  000007                     atoi@s:
   387                           	opt stack 0
   388  000007                     ___awdiv@quotient:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x6
   392  000007                     	ds	2
   393  000009                     ??_atoi:
   394                           
   395                           ; 0 bytes @ 0x8
   396  000009                     	ds	2
   397  00000B                     atoi@sign:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xA
   401  00000B                     	ds	1
   402  00000C                     atoi@a:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0xB
   406  00000C                     	ds	2
   407  00000E                     pwm@dutycycle:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0xD
   411  00000E                     	ds	2
   412  000010                     pwm@color:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0xF
   416  000010                     	ds	1
   417  000011                     ??_high_isr:
   418                           
   419                           ; 0 bytes @ 0x10
   420  000011                     	ds	14
   421  00001F                     high_isr@input:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x1E
   425  00001F                     	ds	2
   426  000021                     ?_readADC:
   427                           	opt stack 0
   428  000021                     ___lwdiv@counter:
   429                           	opt stack 0
   430  000021                     writeStringToUART@msg:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x20
   434  000021                     	ds	1
   435  000022                     ___lwdiv@quotient:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x21
   439  000022                     	ds	1
   440  000023                     
   441                           ; 0 bytes @ 0x22
   442  000023                     	ds	1
   443  000024                     tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           ; 0 bytes @ 0x23
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 163 in file "main.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;  argc            2   22[BANK0 ] int 
   461 ;;  argv            3   24[BANK0 ] PTR PTR unsigned char 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  msg            32   27[BANK0 ] unsigned char [32]
   464 ;;  delay           4   59[BANK0 ] long 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  2   22[BANK0 ] int 
   467 ;; Registers used:
   468 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   474 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   475 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   477 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   478 ;;Total ram usage:       41 bytes
   479 ;; Hardware stack levels required when called:    5
   480 ;; This function calls:
   481 ;;		_initialisation
   482 ;;		_readADC
   483 ;;		_sprintf
   484 ;;		_writeStringToUART
   485 ;; This function is called by:
   486 ;;		Startup code after reset
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text0
   491  00107A                     __ptext0:
   492                           	opt stack 0
   493  00107A                     _main:
   494                           	opt stack 26
   495                           
   496                           ;main.c: 165: long int delay=0;
   497                           
   498                           ;incstack = 0
   499  00107A  0E00               	movlw	0
   500  00107C  0100               	movlb	0	; () banked
   501  00107E  6F9B               	movwf	main@delay& (0+255),b
   502  001080  0E00               	movlw	0
   503  001082  6F9C               	movwf	(main@delay+1)& (0+255),b
   504  001084  0E00               	movlw	0
   505  001086  6F9D               	movwf	(main@delay+2)& (0+255),b
   506  001088  0E00               	movlw	0
   507  00108A  6F9E               	movwf	(main@delay+3)& (0+255),b
   508                           
   509                           ; BSR set to: 0
   510                           ;main.c: 166: initialisation();
   511  00108C  EC36  F00B         	call	_initialisation	;wreg free
   512                           
   513                           ;main.c: 167: char msg[32]="";
   514  001090  EE20  F09F         	lfsr	2,main@F19164
   515  001094  EE10  F07B         	lfsr	1,main@msg
   516  001098  0E1F               	movlw	31
   517  00109A                     u1121:
   518  00109A  CFDB FFE3          	movff	plusw2,plusw1
   519  00109E  06E8               	decf	wreg,f,c
   520  0010A0  E2FC               	bc	u1121
   521  0010A2  D000               	goto	l1727
   522  0010A4                     l1727:
   523                           
   524                           ;main.c: 179: for(delay=0;delay<60000;delay++);
   525  0010A4  0E00               	movlw	0
   526  0010A6  0100               	movlb	0	; () banked
   527  0010A8  6F9B               	movwf	main@delay& (0+255),b
   528  0010AA  0E00               	movlw	0
   529  0010AC  6F9C               	movwf	(main@delay+1)& (0+255),b
   530  0010AE  0E00               	movlw	0
   531  0010B0  6F9D               	movwf	(main@delay+2)& (0+255),b
   532  0010B2  0E00               	movlw	0
   533  0010B4  6F9E               	movwf	(main@delay+3)& (0+255),b
   534  0010B6                     l1729:
   535                           
   536                           ; BSR set to: 0
   537  0010B6  0100               	movlb	0	; () banked
   538  0010B8  BF9E               	btfsc	(main@delay+3)& (0+255),7,b
   539  0010BA  D00F               	goto	l1733
   540  0010BC  0100               	movlb	0	; () banked
   541  0010BE  519E               	movf	(main@delay+3)& (0+255),w,b
   542  0010C0  0100               	movlb	0	; () banked
   543  0010C2  119D               	iorwf	(main@delay+2)& (0+255),w,b
   544  0010C4  E113               	bnz	l1735
   545  0010C6  0E60               	movlw	96
   546  0010C8  0100               	movlb	0	; () banked
   547  0010CA  5D9B               	subwf	main@delay& (0+255),w,b
   548  0010CC  0EEA               	movlw	234
   549  0010CE  0100               	movlb	0	; () banked
   550  0010D0  599C               	subwfb	(main@delay+1)& (0+255),w,b
   551  0010D2  B0D8               	btfsc	status,0,c
   552  0010D4  D00B               	goto	l1735
   553  0010D6  D001               	goto	l1733
   554                           
   555                           ; BSR set to: 0
   556  0010D8  D009               	goto	l1735
   557  0010DA                     l1733:
   558                           
   559                           ; BSR set to: 0
   560  0010DA  0E01               	movlw	1
   561  0010DC  0100               	movlb	0	; () banked
   562  0010DE  279B               	addwf	main@delay& (0+255),f,b
   563  0010E0  0E00               	movlw	0
   564  0010E2  239C               	addwfc	(main@delay+1)& (0+255),f,b
   565  0010E4  239D               	addwfc	(main@delay+2)& (0+255),f,b
   566  0010E6  239E               	addwfc	(main@delay+3)& (0+255),f,b
   567  0010E8  D7E6               	goto	l1729
   568  0010EA  D000               	goto	l1735
   569  0010EC                     l1735:
   570                           
   571                           ; BSR set to: 0
   572                           ;main.c: 183: sprintf(msg, "%u\n\r", readADC(1));
   573  0010EC  0E7B               	movlw	low main@msg
   574  0010EE  0100               	movlb	0	; () banked
   575  0010F0  6F69               	movwf	sprintf@sp& (0+255),b
   576  0010F2  0E00               	movlw	high main@msg
   577  0010F4  0100               	movlb	0	; () banked
   578  0010F6  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
   579  0010F8  0E0B               	movlw	low STR_1
   580  0010FA  0100               	movlb	0	; () banked
   581  0010FC  6F6B               	movwf	sprintf@f& (0+255),b
   582  0010FE  0E0F               	movlw	high STR_1
   583  001100  0100               	movlb	0	; () banked
   584  001102  6F6C               	movwf	(sprintf@f+1)& (0+255),b
   585  001104  0E01               	movlw	1
   586  001106  EC0A  F00A         	call	_readADC
   587  00110A  C021  F06D         	movff	?_readADC,?_sprintf+4
   588  00110E  C022  F06E         	movff	?_readADC+1,?_sprintf+5
   589  001112  EC89  F007         	call	_sprintf	;wreg free
   590                           
   591                           ;main.c: 184: writeStringToUART(msg);
   592  001116  0E7B               	movlw	low main@msg
   593  001118  6E21               	movwf	writeStringToUART@msg,c
   594  00111A  0E00               	movlw	high main@msg
   595  00111C  6E22               	movwf	writeStringToUART@msg+1,c
   596  00111E  EC77  F00A         	call	_writeStringToUART	;wreg free
   597                           
   598                           ;main.c: 186: readADC(2);
   599  001122  0E02               	movlw	2
   600  001124  EC0A  F00A         	call	_readADC
   601                           
   602                           ;main.c: 188: sprintf(msg, "%u\n\r", readADC(2));
   603  001128  0E7B               	movlw	low main@msg
   604  00112A  0100               	movlb	0	; () banked
   605  00112C  6F69               	movwf	sprintf@sp& (0+255),b
   606  00112E  0E00               	movlw	high main@msg
   607  001130  0100               	movlb	0	; () banked
   608  001132  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
   609  001134  0E0B               	movlw	low STR_1
   610  001136  0100               	movlb	0	; () banked
   611  001138  6F6B               	movwf	sprintf@f& (0+255),b
   612  00113A  0E0F               	movlw	high STR_1
   613  00113C  0100               	movlb	0	; () banked
   614  00113E  6F6C               	movwf	(sprintf@f+1)& (0+255),b
   615  001140  0E02               	movlw	2
   616  001142  EC0A  F00A         	call	_readADC
   617  001146  C021  F06D         	movff	?_readADC,?_sprintf+4
   618  00114A  C022  F06E         	movff	?_readADC+1,?_sprintf+5
   619  00114E  EC89  F007         	call	_sprintf	;wreg free
   620                           
   621                           ;main.c: 189: writeStringToUART(msg);
   622  001152  0E7B               	movlw	low main@msg
   623  001154  6E21               	movwf	writeStringToUART@msg,c
   624  001156  0E00               	movlw	high main@msg
   625  001158  6E22               	movwf	writeStringToUART@msg+1,c
   626  00115A  EC77  F00A         	call	_writeStringToUART	;wreg free
   627                           
   628                           ;main.c: 191: readADC(3);
   629  00115E  0E03               	movlw	3
   630  001160  EC0A  F00A         	call	_readADC
   631                           
   632                           ;main.c: 193: sprintf(msg, "%u\n\r", readADC(3));
   633  001164  0E7B               	movlw	low main@msg
   634  001166  0100               	movlb	0	; () banked
   635  001168  6F69               	movwf	sprintf@sp& (0+255),b
   636  00116A  0E00               	movlw	high main@msg
   637  00116C  0100               	movlb	0	; () banked
   638  00116E  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
   639  001170  0E0B               	movlw	low STR_1
   640  001172  0100               	movlb	0	; () banked
   641  001174  6F6B               	movwf	sprintf@f& (0+255),b
   642  001176  0E0F               	movlw	high STR_1
   643  001178  0100               	movlb	0	; () banked
   644  00117A  6F6C               	movwf	(sprintf@f+1)& (0+255),b
   645  00117C  0E03               	movlw	3
   646  00117E  EC0A  F00A         	call	_readADC
   647  001182  C021  F06D         	movff	?_readADC,?_sprintf+4
   648  001186  C022  F06E         	movff	?_readADC+1,?_sprintf+5
   649  00118A  EC89  F007         	call	_sprintf	;wreg free
   650                           
   651                           ;main.c: 194: writeStringToUART(msg);
   652  00118E  0E7B               	movlw	low main@msg
   653  001190  6E21               	movwf	writeStringToUART@msg,c
   654  001192  0E00               	movlw	high main@msg
   655  001194  6E22               	movwf	writeStringToUART@msg+1,c
   656  001196  EC77  F00A         	call	_writeStringToUART	;wreg free
   657                           
   658                           ;main.c: 196: writeStringToUART("\n\r");
   659  00119A  0E0D               	movlw	low (STR_1+2)
   660  00119C  6E21               	movwf	writeStringToUART@msg,c
   661  00119E  0E0F               	movlw	high (STR_1+2)
   662  0011A0  6E22               	movwf	writeStringToUART@msg+1,c
   663  0011A2  EC77  F00A         	call	_writeStringToUART	;wreg free
   664  0011A6  D77E               	goto	l1727
   665                           
   666                           ;main.c: 197: }
   667                           ;main.c: 199: return (0);
   668                           ;	Return value of _main is never used
   669  0011A8  EFBE  F000         	goto	start
   670  0011AC                     __end_of_main:
   671                           	opt stack 0
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           plusw1	equ	0xFE3
   680                           fsr1l	equ	0xFE1
   681                           plusw2	equ	0xFDB
   682                           status	equ	0xFD8
   683                           
   684 ;; *************** function _writeStringToUART *****************
   685 ;; Defined at:
   686 ;;		line 310 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  msg             2   32[COMRAM] PTR const unsigned char 
   689 ;;		 -> STR_4(3), main@msg(32), 
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;		None               void
   694 ;; Registers used:
   695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   705 ;;Total ram usage:        2 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    3
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text1
   716  0014EE                     __ptext1:
   717                           	opt stack 0
   718  0014EE                     _writeStringToUART:
   719                           	opt stack 27
   720                           
   721                           ;main.c: 312: while(*msg) {
   722                           
   723                           ;incstack = 0
   724  0014EE  D018               	goto	l1525
   725                           
   726                           ;main.c: 313: while(PIR3bits.TX2IF == 0) {}
   727  0014F0  D000               	goto	l173
   728  0014F2                     l173:
   729  0014F2  A8A4               	btfss	4004,4,c	;volatile
   730  0014F4  D7FE               	goto	l173
   731                           
   732                           ;main.c: 314: TXREG2 = *msg++;
   733  0014F6  C021  FFF6         	movff	writeStringToUART@msg,tblptrl
   734  0014FA  C022  FFF7         	movff	writeStringToUART@msg+1,tblptrh
   735  0014FE  0E00               	movlw	low (__smallconst shr (0+16))
   736  001500  6EF8               	movwf	tblptru,c
   737  001502  0E0E               	movlw	(high __ramtop+-1)
   738  001504  64F7               	cpfsgt	tblptrh,c
   739  001506  D003               	bra	u797
   740  001508  0008               	tblrd		*
   741  00150A  50F5               	movf	tablat,w,c
   742  00150C  D005               	bra	u790
   743  00150E                     u797:
   744  00150E  CFF6 FFE1          	movff	tblptrl,fsr1l
   745  001512  CFF7 FFE2          	movff	tblptrh,fsr1h
   746  001516  50E7               	movf	indf1,w,c
   747  001518                     u790:
   748  001518  6E79               	movwf	3961,c	;volatile
   749  00151A  4A21               	infsnz	writeStringToUART@msg,f,c
   750  00151C  2A22               	incf	writeStringToUART@msg+1,f,c
   751  00151E  D000               	goto	l1525
   752  001520                     l1525:
   753  001520  C021  FFF6         	movff	writeStringToUART@msg,tblptrl
   754  001524  C022  FFF7         	movff	writeStringToUART@msg+1,tblptrh
   755  001528  0E00               	movlw	low (__smallconst shr (0+16))
   756  00152A  6EF8               	movwf	tblptru,c
   757  00152C  0E0E               	movlw	(high __ramtop+-1)
   758  00152E  64F7               	cpfsgt	tblptrh,c
   759  001530  D003               	bra	u807
   760  001532  0008               	tblrd		*
   761  001534  50F5               	movf	tablat,w,c
   762  001536  D005               	bra	u800
   763  001538                     u807:
   764  001538  CFF6 FFE1          	movff	tblptrl,fsr1l
   765  00153C  CFF7 FFE2          	movff	tblptrh,fsr1h
   766  001540  50E7               	movf	indf1,w,c
   767  001542                     u800:
   768  001542  0900               	iorlw	0
   769  001544  A4D8               	btfss	status,2,c
   770  001546  D7D5               	goto	l173
   771  001548  0012               	return		;funcret
   772  00154A                     __end_of_writeStringToUART:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           indf1	equ	0xFE7
   781                           postdec1	equ	0xFE5
   782                           plusw1	equ	0xFE3
   783                           fsr1h	equ	0xFE2
   784                           fsr1l	equ	0xFE1
   785                           plusw2	equ	0xFDB
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _sprintf *****************
   789 ;; Defined at:
   790 ;;		line 492 in file "/opt/microchip/xc8/v1.34/sources/common/doprnt.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  sp              2    9[BANK0 ] PTR unsigned char 
   793 ;;		 -> main@msg(32), 
   794 ;;  f               2   11[BANK0 ] PTR const unsigned char 
   795 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  tmpval          4    0        struct .
   798 ;;  cp              3    0        PTR const unsigned char 
   799 ;;  val             2   18[BANK0 ] unsigned int 
   800 ;;  ap              2   16[BANK0 ] PTR void [1]
   801 ;;		 -> ?_sprintf(2), 
   802 ;;  len             2    0        unsigned int 
   803 ;;  c               1   21[BANK0 ] char 
   804 ;;  prec            1   20[BANK0 ] char 
   805 ;;  flag            1   15[BANK0 ] unsigned char 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  2    9[BANK0 ] int 
   808 ;; Registers used:
   809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   815 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   816 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   818 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   819 ;;Total ram usage:       13 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    4
   822 ;; This function calls:
   823 ;;		___lwdiv
   824 ;;		___lwmod
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text2
   831  000F12                     __ptext2:
   832                           	opt stack 0
   833  000F12                     _sprintf:
   834                           	opt stack 26
   835                           
   836                           ;doprnt.c: 494: va_list ap;
   837                           ;doprnt.c: 499: signed char c;
   838                           ;doprnt.c: 506: signed char prec;
   839                           ;doprnt.c: 508: unsigned char flag;
   840                           ;doprnt.c: 523: union {
   841                           ;doprnt.c: 524: unsigned long vd;
   842                           ;doprnt.c: 525: double integ;
   843                           ;doprnt.c: 526: } tmpval;
   844                           ;doprnt.c: 528: unsigned int val;
   845                           ;doprnt.c: 529: unsigned len;
   846                           ;doprnt.c: 530: const char * cp;
   847                           ;doprnt.c: 533: *ap = __va_start();
   848                           
   849                           ;incstack = 0
   850  000F12  0E6D               	movlw	low (?_sprintf+4)
   851  000F14  0100               	movlb	0	; () banked
   852  000F16  6F70               	movwf	sprintf@ap& (0+255),b
   853  000F18  0E00               	movlw	high (?_sprintf+4)
   854  000F1A  0100               	movlb	0	; () banked
   855  000F1C  6F71               	movwf	(sprintf@ap+1)& (0+255),b
   856                           
   857                           ;doprnt.c: 536: while(c = *f++) {
   858  000F1E  D095               	goto	l1715
   859  000F20                     l1675:
   860                           
   861                           ; BSR set to: 0
   862                           ;doprnt.c: 538: if(c != '%')
   863  000F20  0E25               	movlw	37
   864  000F22  0100               	movlb	0	; () banked
   865  000F24  1975               	xorwf	sprintf@c& (0+255),w,b
   866  000F26  B4D8               	btfsc	status,2,c
   867  000F28  D00A               	goto	l1681
   868                           
   869                           ; BSR set to: 0
   870                           ;doprnt.c: 540: {
   871                           ;doprnt.c: 541: ((*sp++ = (c)));
   872  000F2A  C069  FFD9         	movff	sprintf@sp,fsr2l
   873  000F2E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
   874  000F32  C075  FFDF         	movff	sprintf@c,indf2
   875                           
   876                           ; BSR set to: 0
   877  000F36  0100               	movlb	0	; () banked
   878  000F38  4B69               	infsnz	sprintf@sp& (0+255),f,b
   879  000F3A  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
   880                           
   881                           ;doprnt.c: 542: continue;
   882  000F3C  D086               	goto	l1715
   883  000F3E                     l1681:
   884                           
   885                           ; BSR set to: 0
   886                           ;doprnt.c: 543: }
   887                           ;doprnt.c: 548: flag = 0;
   888  000F3E  0E00               	movlw	0
   889  000F40  0100               	movlb	0	; () banked
   890  000F42  6F6F               	movwf	sprintf@flag& (0+255),b
   891                           
   892                           ;doprnt.c: 635: switch(c = *f++) {
   893  000F44  D006               	goto	l1687
   894                           
   895                           ; BSR set to: 0
   896                           ;doprnt.c: 638: goto alldone;
   897                           
   898                           ;doprnt.c: 637: case 0:
   899  000F46  D091               	goto	l1717
   900                           
   901                           ; BSR set to: 0
   902                           ;doprnt.c: 813: continue;
   903                           
   904                           ;doprnt.c: 802: default:
   905  000F48  D080               	goto	l1715
   906  000F4A                     l1683:
   907                           
   908                           ; BSR set to: 0
   909                           ;doprnt.c: 818: flag |= 0xC0;
   910  000F4A  0EC0               	movlw	192
   911  000F4C  0100               	movlb	0	; () banked
   912  000F4E  136F               	iorwf	sprintf@flag& (0+255),f,b
   913                           
   914                           ; BSR set to: 0
   915                           ;doprnt.c: 822: }
   916                           
   917                           ;doprnt.c: 819: break;
   918  000F50  D013               	goto	l1689
   919  000F52                     l1687:
   920                           
   921                           ; BSR set to: 0
   922  000F52  C06B  FFF6         	movff	sprintf@f,tblptrl
   923  000F56  C06C  FFF7         	movff	sprintf@f+1,tblptrh
   924  000F5A  0100               	movlb	0	; () banked
   925  000F5C  4B6B               	infsnz	sprintf@f& (0+255),f,b
   926  000F5E  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
   927  000F60                     	if	0	;tblptru may be non-zero
   928  000F60                     	endif
   929  000F60                     	if	0	;tblptru may be non-zero
   930  000F60                     	endif
   931  000F60  0008               	tblrd		*
   932  000F62  CFF5 F075          	movff	tablat,sprintf@c
   933  000F66  0100               	movlb	0	; () banked
   934  000F68  5175               	movf	sprintf@c& (0+255),w,b
   935                           
   936                           ; Switch size 1, requested type "space"
   937                           ; Number of cases is 2, Range of values is 0 to 117
   938                           ; switch strategies available:
   939                           ; Name         Instructions Cycles
   940                           ; simple_byte            7     4 (average)
   941                           ;	Chosen strategy is simple_byte
   942  000F6A  0A00               	xorlw	0	; case 0
   943  000F6C  B4D8               	btfsc	status,2,c
   944  000F6E  D07D               	goto	l1717
   945  000F70  0A75               	xorlw	117	; case 117
   946  000F72  B4D8               	btfsc	status,2,c
   947  000F74  D7EA               	goto	l1683
   948  000F76  D069               	goto	l1715
   949  000F78                     l1689:
   950                           
   951                           ; BSR set to: 0
   952                           ;doprnt.c: 1273: {
   953                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   954  000F78  C070  FFD9         	movff	sprintf@ap,fsr2l
   955  000F7C  C071  FFDA         	movff	sprintf@ap+1,fsr2h
   956  000F80  CFDE F072          	movff	postinc2,sprintf@val
   957  000F84  CFDD F073          	movff	postdec2,sprintf@val+1
   958                           
   959                           ; BSR set to: 0
   960  000F88  0E02               	movlw	2
   961  000F8A  0100               	movlb	0	; () banked
   962  000F8C  2770               	addwf	sprintf@ap& (0+255),f,b
   963  000F8E  0E00               	movlw	0
   964  000F90  2371               	addwfc	(sprintf@ap+1)& (0+255),f,b
   965                           
   966                           ; BSR set to: 0
   967                           ;doprnt.c: 1287: }
   968                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   969  000F92  0E01               	movlw	1
   970  000F94  0100               	movlb	0	; () banked
   971  000F96  6F75               	movwf	sprintf@c& (0+255),b
   972  000F98                     l1695:
   973                           
   974                           ; BSR set to: 0
   975  000F98  0E05               	movlw	5
   976  000F9A  0100               	movlb	0	; () banked
   977  000F9C  1975               	xorwf	sprintf@c& (0+255),w,b
   978  000F9E  B4D8               	btfsc	status,2,c
   979  000FA0  D01A               	goto	l235
   980  000FA2  D001               	goto	l1699
   981                           
   982                           ; BSR set to: 0
   983  000FA4  D018               	goto	l235
   984  000FA6                     l1699:
   985                           
   986                           ; BSR set to: 0
   987                           ;doprnt.c: 1306: if(val < dpowers[c])
   988  000FA6  0100               	movlb	0	; () banked
   989  000FA8  5175               	movf	sprintf@c& (0+255),w,b
   990  000FAA  0D02               	mullw	2
   991  000FAC  0E01               	movlw	low _dpowers
   992  000FAE  24F3               	addwf	prodl,w,c
   993  000FB0  6EF6               	movwf	tblptrl,c
   994  000FB2  0E0F               	movlw	high _dpowers
   995  000FB4  20F4               	addwfc	prodh,w,c
   996  000FB6  6EF7               	movwf	tblptrh,c
   997  000FB8                     	if	0	;There are less than 3 active tblptr bytes
   998  000FB8                     	endif
   999  000FB8  0009               	tblrd		*+
  1000  000FBA  50F5               	movf	tablat,w,c
  1001  000FBC  0100               	movlb	0	; () banked
  1002  000FBE  5D72               	subwf	sprintf@val& (0+255),w,b
  1003  000FC0  0009               	tblrd		*+
  1004  000FC2  50F5               	movf	tablat,w,c
  1005  000FC4  0100               	movlb	0	; () banked
  1006  000FC6  5973               	subwfb	(sprintf@val+1)& (0+255),w,b
  1007  000FC8  A0D8               	btfss	status,0,c
  1008  000FCA  D005               	goto	l235
  1009  000FCC  D001               	goto	l1703
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;doprnt.c: 1307: break;
  1013  000FCE  D003               	goto	l235
  1014  000FD0                     l1703:
  1015                           
  1016                           ; BSR set to: 0
  1017  000FD0  0100               	movlb	0	; () banked
  1018  000FD2  2B75               	incf	sprintf@c& (0+255),f,b
  1019  000FD4  D7E1               	goto	l1695
  1020  000FD6                     l235:
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;doprnt.c: 1422: {
  1024                           ;doprnt.c: 1469: }
  1025                           ;doprnt.c: 1472: prec = c;
  1026  000FD6  C075  F074         	movff	sprintf@c,sprintf@prec
  1027                           
  1028                           ;doprnt.c: 1474: while(prec--) {
  1029  000FDA  D02F               	goto	l1713
  1030  000FDC                     l1707:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;doprnt.c: 1478: {
  1034                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1035  000FDC  0100               	movlb	0	; () banked
  1036  000FDE  5174               	movf	sprintf@prec& (0+255),w,b
  1037  000FE0  0D02               	mullw	2
  1038  000FE2  0E01               	movlw	low _dpowers
  1039  000FE4  24F3               	addwf	prodl,w,c
  1040  000FE6  6EF6               	movwf	tblptrl,c
  1041  000FE8  0E0F               	movlw	high _dpowers
  1042  000FEA  20F4               	addwfc	prodh,w,c
  1043  000FEC  6EF7               	movwf	tblptrh,c
  1044  000FEE                     	if	0	;There are less than 3 active tblptr bytes
  1045  000FEE                     	endif
  1046  000FEE  0009               	tblrd		*+
  1047  000FF0  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1048  000FF4  000A               	tblrd		*-
  1049  000FF6  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1050  000FFA  C072  F060         	movff	sprintf@val,___lwdiv@dividend
  1051  000FFE  C073  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  1052  001002  ECCF  F009         	call	___lwdiv	;wreg free
  1053  001006  C060  F064         	movff	?___lwdiv,___lwmod@dividend
  1054  00100A  C061  F065         	movff	?___lwdiv+1,___lwmod@dividend+1
  1055  00100E  0E00               	movlw	0
  1056  001010  0100               	movlb	0	; () banked
  1057  001012  6F67               	movwf	(___lwmod@divisor+1)& (0+255),b
  1058  001014  0E0A               	movlw	10
  1059  001016  6F66               	movwf	___lwmod@divisor& (0+255),b
  1060  001018  EC41  F00A         	call	___lwmod	;wreg free
  1061  00101C  0100               	movlb	0	; () banked
  1062  00101E  5164               	movf	?___lwmod& (0+255),w,b
  1063  001020  0F30               	addlw	48
  1064  001022  0100               	movlb	0	; () banked
  1065  001024  6F75               	movwf	sprintf@c& (0+255),b
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;doprnt.c: 1523: }
  1069                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1070  001026  C069  FFD9         	movff	sprintf@sp,fsr2l
  1071  00102A  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  1072  00102E  C075  FFDF         	movff	sprintf@c,indf2
  1073                           
  1074                           ; BSR set to: 0
  1075  001032  0100               	movlb	0	; () banked
  1076  001034  4B69               	infsnz	sprintf@sp& (0+255),f,b
  1077  001036  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  1078  001038  D000               	goto	l1713
  1079  00103A                     l1713:
  1080                           
  1081                           ; BSR set to: 0
  1082  00103A  0100               	movlb	0	; () banked
  1083  00103C  0774               	decf	sprintf@prec& (0+255),f,b
  1084  00103E  0100               	movlb	0	; () banked
  1085  001040  2974               	incf	sprintf@prec& (0+255),w,b
  1086  001042  B4D8               	btfsc	status,2,c
  1087  001044  D002               	goto	l1715
  1088  001046  D7CA               	goto	l1707
  1089                           
  1090                           ; BSR set to: 0
  1091  001048  D000               	goto	l1715
  1092  00104A                     l1715:
  1093                           
  1094                           ; BSR set to: 0
  1095  00104A  C06B  FFF6         	movff	sprintf@f,tblptrl
  1096  00104E  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  1097  001052  0100               	movlb	0	; () banked
  1098  001054  4B6B               	infsnz	sprintf@f& (0+255),f,b
  1099  001056  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  1100  001058                     	if	0	;tblptru may be non-zero
  1101  001058                     	endif
  1102  001058                     	if	0	;tblptru may be non-zero
  1103  001058                     	endif
  1104  001058  0008               	tblrd		*
  1105  00105A  CFF5 F075          	movff	tablat,sprintf@c
  1106  00105E  0100               	movlb	0	; () banked
  1107  001060  5175               	movf	sprintf@c& (0+255),w,b
  1108  001062  B4D8               	btfsc	status,2,c
  1109  001064  D002               	goto	l1717
  1110  001066  D75C               	goto	l1675
  1111                           
  1112                           ; BSR set to: 0
  1113  001068  D000               	goto	l1717
  1114  00106A                     l1717:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;doprnt.c: 1538: *sp = 0;
  1118  00106A  C069  FFD9         	movff	sprintf@sp,fsr2l
  1119  00106E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  1120  001072  0E00               	movlw	0
  1121  001074  6EDF               	movwf	indf2,c
  1122  001076  0012               	return	
  1123                           
  1124                           ; BSR set to: 0
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;doprnt.c: 1540: return 0;
  1128                           ;	Return value of _sprintf is never used
  1129  001078  0012               	return		;funcret
  1130  00107A                     __end_of_sprintf:
  1131                           	opt stack 0
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           prodh	equ	0xFF4
  1137                           prodl	equ	0xFF3
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           indf1	equ	0xFE7
  1141                           postdec1	equ	0xFE5
  1142                           plusw1	equ	0xFE3
  1143                           fsr1h	equ	0xFE2
  1144                           fsr1l	equ	0xFE1
  1145                           indf2	equ	0xFDF
  1146                           postinc2	equ	0xFDE
  1147                           postdec2	equ	0xFDD
  1148                           plusw2	equ	0xFDB
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function ___lwmod *****************
  1154 ;; Defined at:
  1155 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  dividend        2    4[BANK0 ] unsigned int 
  1158 ;;  divisor         2    6[BANK0 ] unsigned int 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  counter         1    8[BANK0 ] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  2    4[BANK0 ] unsigned int 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1170 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1173 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1174 ;;Total ram usage:        5 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    3
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_sprintf
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text3
  1185  001482                     __ptext3:
  1186                           	opt stack 0
  1187  001482                     ___lwmod:
  1188                           	opt stack 26
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;incstack = 0
  1192  001482  0100               	movlb	0	; () banked
  1193  001484  5166               	movf	___lwmod@divisor& (0+255),w,b
  1194  001486  0100               	movlb	0	; () banked
  1195  001488  1167               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1196  00148A  B4D8               	btfsc	status,2,c
  1197  00148C  D02B               	goto	l792
  1198                           
  1199                           ; BSR set to: 0
  1200  00148E  0E01               	movlw	1
  1201  001490  0100               	movlb	0	; () banked
  1202  001492  6F68               	movwf	___lwmod@counter& (0+255),b
  1203  001494  D007               	goto	l1643
  1204  001496                     l1641:
  1205                           
  1206                           ; BSR set to: 0
  1207  001496  0100               	movlb	0	; () banked
  1208  001498  90D8               	bcf	status,0,c
  1209  00149A  3766               	rlcf	___lwmod@divisor& (0+255),f,b
  1210  00149C  3767               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1211  00149E  0100               	movlb	0	; () banked
  1212  0014A0  2B68               	incf	___lwmod@counter& (0+255),f,b
  1213  0014A2  D000               	goto	l1643
  1214  0014A4                     l1643:
  1215                           
  1216                           ; BSR set to: 0
  1217  0014A4  0100               	movlb	0	; () banked
  1218  0014A6  BF67               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
  1219  0014A8  D002               	goto	l1645
  1220  0014AA  D7F5               	goto	l1641
  1221                           
  1222                           ; BSR set to: 0
  1223  0014AC  D000               	goto	l1645
  1224  0014AE                     l1645:
  1225                           
  1226                           ; BSR set to: 0
  1227  0014AE  0100               	movlb	0	; () banked
  1228  0014B0  5166               	movf	___lwmod@divisor& (0+255),w,b
  1229  0014B2  0100               	movlb	0	; () banked
  1230  0014B4  5D64               	subwf	___lwmod@dividend& (0+255),w,b
  1231  0014B6  0100               	movlb	0	; () banked
  1232  0014B8  5167               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1233  0014BA  0100               	movlb	0	; () banked
  1234  0014BC  5965               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1235  0014BE  A0D8               	btfss	status,0,c
  1236  0014C0  D009               	goto	l1649
  1237                           
  1238                           ; BSR set to: 0
  1239  0014C2  0100               	movlb	0	; () banked
  1240  0014C4  5166               	movf	___lwmod@divisor& (0+255),w,b
  1241  0014C6  0100               	movlb	0	; () banked
  1242  0014C8  5F64               	subwf	___lwmod@dividend& (0+255),f,b
  1243  0014CA  0100               	movlb	0	; () banked
  1244  0014CC  5167               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1245  0014CE  0100               	movlb	0	; () banked
  1246  0014D0  5B65               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1247  0014D2  D000               	goto	l1649
  1248  0014D4                     l1649:
  1249                           
  1250                           ; BSR set to: 0
  1251  0014D4  0100               	movlb	0	; () banked
  1252  0014D6  90D8               	bcf	status,0,c
  1253  0014D8  3367               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1254  0014DA  3366               	rrcf	___lwmod@divisor& (0+255),f,b
  1255                           
  1256                           ; BSR set to: 0
  1257  0014DC  0100               	movlb	0	; () banked
  1258  0014DE  2F68               	decfsz	___lwmod@counter& (0+255),f,b
  1259  0014E0  D7E6               	goto	l1645
  1260  0014E2  D000               	goto	l792
  1261  0014E4                     l792:
  1262                           
  1263                           ; BSR set to: 0
  1264  0014E4  C064  F064         	movff	___lwmod@dividend,?___lwmod
  1265  0014E8  C065  F065         	movff	___lwmod@dividend+1,?___lwmod+1
  1266                           
  1267                           ; BSR set to: 0
  1268  0014EC  0012               	return		;funcret
  1269  0014EE                     __end_of___lwmod:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           prodh	equ	0xFF4
  1276                           prodl	equ	0xFF3
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           indf1	equ	0xFE7
  1280                           postdec1	equ	0xFE5
  1281                           plusw1	equ	0xFE3
  1282                           fsr1h	equ	0xFE2
  1283                           fsr1l	equ	0xFE1
  1284                           indf2	equ	0xFDF
  1285                           postinc2	equ	0xFDE
  1286                           postdec2	equ	0xFDD
  1287                           plusw2	equ	0xFDB
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           status	equ	0xFD8
  1291                           
  1292 ;; *************** function ___lwdiv *****************
  1293 ;; Defined at:
  1294 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  dividend        2    0[BANK0 ] unsigned int 
  1297 ;;  divisor         2    2[BANK0 ] unsigned int 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  quotient        2   33[COMRAM] unsigned int 
  1300 ;;  counter         1   32[COMRAM] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  2    0[BANK0 ] unsigned int 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1310 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1311 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1313 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1314 ;;Total ram usage:        7 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    3
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_sprintf
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text4
  1325  00139E                     __ptext4:
  1326                           	opt stack 0
  1327  00139E                     ___lwdiv:
  1328                           	opt stack 26
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;incstack = 0
  1332  00139E  0E00               	movlw	0
  1333  0013A0  6E23               	movwf	___lwdiv@quotient+1,c
  1334  0013A2  0E00               	movlw	0
  1335  0013A4  6E22               	movwf	___lwdiv@quotient,c
  1336  0013A6  0100               	movlb	0	; () banked
  1337  0013A8  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1338  0013AA  0100               	movlb	0	; () banked
  1339  0013AC  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1340  0013AE  B4D8               	btfsc	status,2,c
  1341  0013B0  D02C               	goto	l782
  1342                           
  1343                           ; BSR set to: 0
  1344  0013B2  0E01               	movlw	1
  1345  0013B4  6E21               	movwf	___lwdiv@counter,c
  1346  0013B6  D006               	goto	l1623
  1347  0013B8                     l1621:
  1348                           
  1349                           ; BSR set to: 0
  1350  0013B8  0100               	movlb	0	; () banked
  1351  0013BA  90D8               	bcf	status,0,c
  1352  0013BC  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1353  0013BE  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1354  0013C0  2A21               	incf	___lwdiv@counter,f,c
  1355  0013C2  D000               	goto	l1623
  1356  0013C4                     l1623:
  1357                           
  1358                           ; BSR set to: 0
  1359  0013C4  0100               	movlb	0	; () banked
  1360  0013C6  BF63               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
  1361  0013C8  D002               	goto	l1625
  1362  0013CA  D7F6               	goto	l1621
  1363                           
  1364                           ; BSR set to: 0
  1365  0013CC  D000               	goto	l1625
  1366  0013CE                     l1625:
  1367                           
  1368                           ; BSR set to: 0
  1369  0013CE  90D8               	bcf	status,0,c
  1370  0013D0  3622               	rlcf	___lwdiv@quotient,f,c
  1371  0013D2  3623               	rlcf	___lwdiv@quotient+1,f,c
  1372                           
  1373                           ; BSR set to: 0
  1374  0013D4  0100               	movlb	0	; () banked
  1375  0013D6  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1376  0013D8  0100               	movlb	0	; () banked
  1377  0013DA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1378  0013DC  0100               	movlb	0	; () banked
  1379  0013DE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1380  0013E0  0100               	movlb	0	; () banked
  1381  0013E2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1382  0013E4  A0D8               	btfss	status,0,c
  1383  0013E6  D00A               	goto	l1633
  1384                           
  1385                           ; BSR set to: 0
  1386  0013E8  0100               	movlb	0	; () banked
  1387  0013EA  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1388  0013EC  0100               	movlb	0	; () banked
  1389  0013EE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1390  0013F0  0100               	movlb	0	; () banked
  1391  0013F2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1392  0013F4  0100               	movlb	0	; () banked
  1393  0013F6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1394                           
  1395                           ; BSR set to: 0
  1396  0013F8  8022               	bsf	___lwdiv@quotient,0,c
  1397  0013FA  D000               	goto	l1633
  1398  0013FC                     l1633:
  1399                           
  1400                           ; BSR set to: 0
  1401  0013FC  0100               	movlb	0	; () banked
  1402  0013FE  90D8               	bcf	status,0,c
  1403  001400  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1404  001402  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1405                           
  1406                           ; BSR set to: 0
  1407  001404  2E21               	decfsz	___lwdiv@counter,f,c
  1408  001406  D7E3               	goto	l1625
  1409  001408  D000               	goto	l782
  1410  00140A                     l782:
  1411                           
  1412                           ; BSR set to: 0
  1413  00140A  C022  F060         	movff	___lwdiv@quotient,?___lwdiv
  1414  00140E  C023  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1415                           
  1416                           ; BSR set to: 0
  1417  001412  0012               	return		;funcret
  1418  001414                     __end_of___lwdiv:
  1419                           	opt stack 0
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf1	equ	0xFE7
  1429                           postdec1	equ	0xFE5
  1430                           plusw1	equ	0xFE3
  1431                           fsr1h	equ	0xFE2
  1432                           fsr1l	equ	0xFE1
  1433                           indf2	equ	0xFDF
  1434                           postinc2	equ	0xFDE
  1435                           postdec2	equ	0xFDD
  1436                           plusw2	equ	0xFDB
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441 ;; *************** function _readADC *****************
  1442 ;; Defined at:
  1443 ;;		line 318 in file "main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  channel         1    wreg     unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  channel         1    2[BANK0 ] unsigned char 
  1448 ;;  tempo           1    3[BANK0 ] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  2   32[COMRAM] unsigned int 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1459 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1461 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1462 ;;Total ram usage:        6 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    3
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text5
  1473  001414                     __ptext5:
  1474                           	opt stack 0
  1475  001414                     _readADC:
  1476                           	opt stack 27
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;incstack = 0
  1480                           ;readADC@channel stored from wreg
  1481  001414  0100               	movlb	0	; () banked
  1482  001416  6F62               	movwf	readADC@channel& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 320: char tempo=0;
  1486  001418  0E00               	movlw	0
  1487  00141A  0100               	movlb	0	; () banked
  1488  00141C  6F63               	movwf	readADC@tempo& (0+255),b
  1489                           
  1490                           ;main.c: 321: switch (channel)
  1491  00141E  D008               	goto	l1657
  1492  001420                     l181:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;main.c: 324: {
  1496                           ;main.c: 325: CHS1=0;
  1497  001420  96C2               	bcf	4034,3,c	;volatile
  1498  001422  D004               	goto	L1
  1499  001424                     l183:
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 330: {
  1503                           ;main.c: 331: CHS1=1;
  1504  001424  86C2               	bsf	4034,3,c	;volatile
  1505                           
  1506                           ;main.c: 332: CHS0=0;
  1507  001426  94C2               	bcf	4034,2,c	;volatile
  1508                           
  1509                           ;main.c: 333: break;
  1510  001428  D00F               	goto	l1659
  1511  00142A                     l184:
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 336: {
  1515                           ;main.c: 337: CHS1=1;
  1516  00142A  86C2               	bsf	4034,3,c	;volatile
  1517  00142C                     L1:
  1518                           
  1519                           ;main.c: 338: CHS0=1;
  1520  00142C  84C2               	bsf	4034,2,c	;volatile
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;main.c: 340: }
  1524                           ;main.c: 341: }
  1525                           
  1526                           ;main.c: 339: break;
  1527  00142E  D00C               	goto	l1659
  1528  001430                     l1657:
  1529                           
  1530                           ; BSR set to: 0
  1531  001430  0100               	movlb	0	; () banked
  1532  001432  5162               	movf	readADC@channel& (0+255),w,b
  1533                           
  1534                           ; Switch size 1, requested type "space"
  1535                           ; Number of cases is 3, Range of values is 1 to 3
  1536                           ; switch strategies available:
  1537                           ; Name         Instructions Cycles
  1538                           ; simple_byte           10     6 (average)
  1539                           ;	Chosen strategy is simple_byte
  1540  001434  0A01               	xorlw	1	; case 1
  1541  001436  B4D8               	btfsc	status,2,c
  1542  001438  D7F3               	goto	l181
  1543  00143A  0A03               	xorlw	3	; case 2
  1544  00143C  B4D8               	btfsc	status,2,c
  1545  00143E  D7F2               	goto	l183
  1546  001440  0A01               	xorlw	1	; case 3
  1547  001442  B4D8               	btfsc	status,2,c
  1548  001444  D7F2               	goto	l184
  1549  001446  D000               	goto	l1659
  1550  001448                     l1659:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 342: for(tempo=0;tempo<100;tempo++);
  1554  001448  0E00               	movlw	0
  1555  00144A  0100               	movlb	0	; () banked
  1556  00144C  6F63               	movwf	readADC@tempo& (0+255),b
  1557  00144E  D003               	goto	l1667
  1558                           
  1559                           ; BSR set to: 0
  1560                           
  1561                           ; BSR set to: 0
  1562  001450  D006               	goto	l186
  1563  001452                     l1665:
  1564                           
  1565                           ; BSR set to: 0
  1566  001452  0100               	movlb	0	; () banked
  1567  001454  2B63               	incf	readADC@tempo& (0+255),f,b
  1568  001456                     l1667:
  1569                           
  1570                           ; BSR set to: 0
  1571  001456  0E63               	movlw	99
  1572  001458  0100               	movlb	0	; () banked
  1573  00145A  6563               	cpfsgt	readADC@tempo& (0+255),b
  1574  00145C  D7FA               	goto	l1665
  1575  00145E                     l186:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 343: GO_nDONE = 1;
  1579  00145E  82C2               	bsf	4034,1,c	;volatile
  1580                           
  1581                           ;main.c: 344: while(GO_nDONE);
  1582  001460  D000               	goto	l187
  1583  001462                     l187:
  1584                           
  1585                           ; BSR set to: 0
  1586  001462  B2C2               	btfsc	4034,1,c	;volatile
  1587  001464  D7FE               	goto	l187
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 346: return ((ADRESH<<8)+ADRESL);
  1591                           
  1592                           ; BSR set to: 0
  1593  001466  50C4               	movf	4036,w,c	;volatile
  1594  001468  0100               	movlb	0	; () banked
  1595  00146A  6F61               	movwf	(??_readADC+1)& (0+255),b
  1596  00146C  6B60               	clrf	??_readADC& (0+255),b
  1597  00146E  50C3               	movf	4035,w,c	;volatile
  1598  001470  0100               	movlb	0	; () banked
  1599  001472  2560               	addwf	??_readADC& (0+255),w,b
  1600  001474  6E21               	movwf	?_readADC,c
  1601  001476  0E00               	movlw	0
  1602  001478  0100               	movlb	0	; () banked
  1603  00147A  2161               	addwfc	(??_readADC+1)& (0+255),w,b
  1604  00147C  6E22               	movwf	?_readADC+1,c
  1605  00147E  0012               	return	
  1606                           
  1607                           ; BSR set to: 0
  1608                           
  1609                           ; BSR set to: 0
  1610  001480  0012               	return		;funcret
  1611  001482                     __end_of_readADC:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           prodh	equ	0xFF4
  1618                           prodl	equ	0xFF3
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           indf1	equ	0xFE7
  1622                           postdec1	equ	0xFE5
  1623                           plusw1	equ	0xFE3
  1624                           fsr1h	equ	0xFE2
  1625                           fsr1l	equ	0xFE1
  1626                           indf2	equ	0xFDF
  1627                           postinc2	equ	0xFDE
  1628                           postdec2	equ	0xFDD
  1629                           plusw2	equ	0xFDB
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _initialisation *****************
  1635 ;; Defined at:
  1636 ;;		line 203 in file "main.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;		None               void
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    4
  1657 ;; This function calls:
  1658 ;;		_initADC
  1659 ;;		_initComms
  1660 ;;		_initPWM
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text6
  1667  00166C                     __ptext6:
  1668                           	opt stack 0
  1669  00166C                     _initialisation:
  1670                           	opt stack 26
  1671                           
  1672                           ;main.c: 207: initPWM();
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;incstack = 0
  1676  00166C  ECA5  F00A         	call	_initPWM	;wreg free
  1677                           
  1678                           ;main.c: 211: initComms();
  1679  001670  ECEF  F00A         	call	_initComms	;wreg free
  1680                           
  1681                           ;main.c: 215: initADC();
  1682  001674  EC28  F00B         	call	_initADC	;wreg free
  1683  001678  0012               	return		;funcret
  1684  00167A                     __end_of_initialisation:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           prodh	equ	0xFF4
  1691                           prodl	equ	0xFF3
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           indf1	equ	0xFE7
  1695                           postdec1	equ	0xFE5
  1696                           plusw1	equ	0xFE3
  1697                           fsr1h	equ	0xFE2
  1698                           fsr1l	equ	0xFE1
  1699                           indf2	equ	0xFDF
  1700                           postinc2	equ	0xFDE
  1701                           postdec2	equ	0xFDD
  1702                           plusw2	equ	0xFDB
  1703                           fsr2h	equ	0xFDA
  1704                           fsr2l	equ	0xFD9
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _initPWM *****************
  1708 ;; Defined at:
  1709 ;;		line 220 in file "main.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;		None               void
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    3
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_initialisation
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text7
  1738  00154A                     __ptext7:
  1739                           	opt stack 0
  1740  00154A                     _initPWM:
  1741                           	opt stack 26
  1742                           
  1743                           ;main.c: 225: PR2=0xFF;
  1744                           
  1745                           ;incstack = 0
  1746  00154A  68CB               	setf	4043,c	;volatile
  1747                           
  1748                           ;main.c: 229: CCPR2L=0b00000000;
  1749  00154C  0E00               	movlw	0
  1750  00154E  010F               	movlb	15	; () banked
  1751  001550  6F51               	movwf	81,b	;volatile
  1752                           
  1753                           ;main.c: 230: CCPR3L=0b00000000;
  1754  001552  0E00               	movlw	0
  1755  001554  010F               	movlb	15	; () banked
  1756  001556  6F4E               	movwf	78,b	;volatile
  1757                           
  1758                           ;main.c: 231: CCPR4L=0b00000000;
  1759  001558  0E00               	movlw	0
  1760  00155A  010F               	movlb	15	; () banked
  1761  00155C  6F4B               	movwf	75,b	;volatile
  1762                           
  1763                           ; BSR set to: 15
  1764                           ;main.c: 232: DC2B1=0;
  1765  00155E  010F               	movlb	15	; () banked
  1766  001560  9B50               	bcf	80,5,b	;volatile
  1767                           
  1768                           ; BSR set to: 15
  1769                           ;main.c: 233: DC2B0=0;
  1770  001562  010F               	movlb	15	; () banked
  1771  001564  9950               	bcf	80,4,b	;volatile
  1772                           
  1773                           ; BSR set to: 15
  1774                           ;main.c: 234: DC3B1=0;
  1775  001566  010F               	movlb	15	; () banked
  1776  001568  9B4D               	bcf	77,5,b	;volatile
  1777                           
  1778                           ; BSR set to: 15
  1779                           ;main.c: 235: DC3B0=0;
  1780  00156A  010F               	movlb	15	; () banked
  1781  00156C  994D               	bcf	77,4,b	;volatile
  1782                           
  1783                           ; BSR set to: 15
  1784                           ;main.c: 236: DC4B1=0;
  1785  00156E  010F               	movlb	15	; () banked
  1786  001570  9B4A               	bcf	74,5,b	;volatile
  1787                           
  1788                           ; BSR set to: 15
  1789                           ;main.c: 237: DC4B0=0;
  1790  001572  010F               	movlb	15	; () banked
  1791  001574  994A               	bcf	74,4,b	;volatile
  1792                           
  1793                           ; BSR set to: 15
  1794                           ;main.c: 243: TRISC=TRISC & 0b00111011;
  1795  001576  5094               	movf	3988,w,c	;volatile
  1796  001578  0B3B               	andlw	59
  1797  00157A  6E94               	movwf	3988,c	;volatile
  1798                           
  1799                           ; BSR set to: 15
  1800                           ;main.c: 246: T2CKPS1=0;
  1801  00157C  92CA               	bcf	4042,1,c	;volatile
  1802                           
  1803                           ; BSR set to: 15
  1804                           ;main.c: 247: T2CKPS0=0;
  1805  00157E  90CA               	bcf	4042,0,c	;volatile
  1806                           
  1807                           ; BSR set to: 15
  1808                           ;main.c: 250: TMR2ON = 1;
  1809  001580  84CA               	bsf	4042,2,c	;volatile
  1810                           
  1811                           ; BSR set to: 15
  1812                           ;main.c: 253: CCP2M2=1;
  1813  001582  010F               	movlb	15	; () banked
  1814  001584  8550               	bsf	80,2,b	;volatile
  1815                           
  1816                           ; BSR set to: 15
  1817                           ;main.c: 254: CCP2M3=1;
  1818  001586  010F               	movlb	15	; () banked
  1819  001588  8750               	bsf	80,3,b	;volatile
  1820                           
  1821                           ; BSR set to: 15
  1822                           ;main.c: 255: CCP3M2=1;
  1823  00158A  010F               	movlb	15	; () banked
  1824  00158C  854D               	bsf	77,2,b	;volatile
  1825                           
  1826                           ; BSR set to: 15
  1827                           ;main.c: 256: CCP3M3=1;
  1828  00158E  010F               	movlb	15	; () banked
  1829  001590  874D               	bsf	77,3,b	;volatile
  1830                           
  1831                           ; BSR set to: 15
  1832                           ;main.c: 257: CCP4M2=1;
  1833  001592  010F               	movlb	15	; () banked
  1834  001594  854A               	bsf	74,2,b	;volatile
  1835                           
  1836                           ; BSR set to: 15
  1837                           ;main.c: 258: CCP4M3=1;
  1838  001596  010F               	movlb	15	; () banked
  1839  001598  874A               	bsf	74,3,b	;volatile
  1840                           
  1841                           ; BSR set to: 15
  1842  00159A  0012               	return		;funcret
  1843  00159C                     __end_of_initPWM:
  1844                           	opt stack 0
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           prodh	equ	0xFF4
  1850                           prodl	equ	0xFF3
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           indf1	equ	0xFE7
  1854                           postdec1	equ	0xFE5
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           indf2	equ	0xFDF
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           plusw2	equ	0xFDB
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _initComms *****************
  1867 ;; Defined at:
  1868 ;;		line 262 in file "main.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, status,2
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_initialisation
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text8
  1897  0015DE                     __ptext8:
  1898                           	opt stack 0
  1899  0015DE                     _initComms:
  1900                           	opt stack 26
  1901                           
  1902                           ;main.c: 264: TRISBbits.TRISB7 = 1;
  1903                           
  1904                           ; BSR set to: 15
  1905                           ;incstack = 0
  1906  0015DE  8E93               	bsf	3987,7,c	;volatile
  1907                           
  1908                           ;main.c: 265: TRISBbits.TRISB6 = 0;
  1909  0015E0  9C93               	bcf	3987,6,c	;volatile
  1910                           
  1911                           ;main.c: 268: TXSTA2bits.BRGH = 1;
  1912  0015E2  84BA               	bsf	4026,2,c	;volatile
  1913                           
  1914                           ;main.c: 269: TXSTA2bits.SYNC = 0;
  1915  0015E4  98BA               	bcf	4026,4,c	;volatile
  1916                           
  1917                           ;main.c: 270: SPBRGH2 = 0;
  1918  0015E6  0E00               	movlw	0
  1919  0015E8  6E7C               	movwf	3964,c	;volatile
  1920                           
  1921                           ;main.c: 271: SPBRG2 = 51;
  1922  0015EA  0E33               	movlw	51
  1923  0015EC  6E7B               	movwf	3963,c	;volatile
  1924                           
  1925                           ;main.c: 272: BAUDCON2 = 0x08;
  1926  0015EE  0E08               	movlw	8
  1927  0015F0  6EB9               	movwf	4025,c	;volatile
  1928                           
  1929                           ;main.c: 276: TXSTA2bits.TXEN = 1;
  1930  0015F2  8ABA               	bsf	4026,5,c	;volatile
  1931                           
  1932                           ;main.c: 277: RCSTA2bits.CREN = 1;
  1933  0015F4  88A6               	bsf	4006,4,c	;volatile
  1934                           
  1935                           ;main.c: 278: RCSTA2bits.SPEN = 1;
  1936  0015F6  8EA6               	bsf	4006,7,c	;volatile
  1937                           
  1938                           ;main.c: 281: RCONbits.IPEN = 1;
  1939  0015F8  8ED0               	bsf	4048,7,c	;volatile
  1940                           
  1941                           ;main.c: 282: INTCONbits.GIE = 1;
  1942  0015FA  8EF2               	bsf	intcon,7,c	;volatile
  1943                           
  1944                           ;main.c: 283: INTCONbits.PEIE = 1;
  1945  0015FC  8CF2               	bsf	intcon,6,c	;volatile
  1946                           
  1947                           ;main.c: 284: PIE3bits.RC2IE = 0;
  1948  0015FE  9AA3               	bcf	4003,5,c	;volatile
  1949                           
  1950                           ;main.c: 285: PIE3bits.TX2IE = 0;
  1951  001600  98A3               	bcf	4003,4,c	;volatile
  1952                           
  1953                           ;main.c: 287: RC2IF = 0;
  1954  001602  9AA4               	bcf	4004,5,c	;volatile
  1955  001604  0012               	return		;funcret
  1956  001606                     __end_of_initComms:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           intcon	equ	0xFF2
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf1	equ	0xFE7
  1968                           postdec1	equ	0xFE5
  1969                           plusw1	equ	0xFE3
  1970                           fsr1h	equ	0xFE2
  1971                           fsr1l	equ	0xFE1
  1972                           indf2	equ	0xFDF
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           plusw2	equ	0xFDB
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _initADC *****************
  1981 ;; Defined at:
  1982 ;;		line 290 in file "main.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;		None               void
  1989 ;; Registers used:
  1990 ;;		None
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2000 ;;Total ram usage:        0 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    3
  2003 ;; This function calls:
  2004 ;;		Nothing
  2005 ;; This function is called by:
  2006 ;;		_initialisation
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text9
  2011  001650                     __ptext9:
  2012                           	opt stack 0
  2013  001650                     _initADC:
  2014                           	opt stack 26
  2015                           
  2016                           ;main.c: 292: TRIGSEL1=0;
  2017                           
  2018                           ;incstack = 0
  2019  001650  9EC1               	bcf	4033,7,c	;volatile
  2020                           
  2021                           ;main.c: 293: TRIGSEL0=0;
  2022  001652  9CC1               	bcf	4033,6,c	;volatile
  2023                           
  2024                           ;main.c: 295: VCFG1=0;
  2025  001654  9AC1               	bcf	4033,5,c	;volatile
  2026                           
  2027                           ;main.c: 296: VCFG0=0;
  2028  001656  98C1               	bcf	4033,4,c	;volatile
  2029                           
  2030                           ;main.c: 297: VNCFG=0;
  2031  001658  96C1               	bcf	4033,3,c	;volatile
  2032                           
  2033                           ;main.c: 301: ANSEL3=1;
  2034  00165A  010F               	movlb	15	; () banked
  2035  00165C  875D               	bsf	93,3,b	;volatile
  2036                           
  2037                           ;main.c: 302: ANSEL2=1;
  2038  00165E  010F               	movlb	15	; () banked
  2039  001660  855D               	bsf	93,2,b	;volatile
  2040                           
  2041                           ;main.c: 303: ANSEL1=1;
  2042  001662  010F               	movlb	15	; () banked
  2043  001664  835D               	bsf	93,1,b	;volatile
  2044                           
  2045                           ;main.c: 305: ADON=1;
  2046  001666  80C2               	bsf	4034,0,c	;volatile
  2047                           
  2048                           ;main.c: 307: CHS0=1;
  2049  001668  84C2               	bsf	4034,2,c	;volatile
  2050                           
  2051                           ; BSR set to: 15
  2052  00166A  0012               	return		;funcret
  2053  00166C                     __end_of_initADC:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           intcon	equ	0xFF2
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           indf1	equ	0xFE7
  2065                           postdec1	equ	0xFE5
  2066                           plusw1	equ	0xFE3
  2067                           fsr1h	equ	0xFE2
  2068                           fsr1l	equ	0xFE1
  2069                           indf2	equ	0xFDF
  2070                           postinc2	equ	0xFDE
  2071                           postdec2	equ	0xFDD
  2072                           plusw2	equ	0xFDB
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _high_isr *****************
  2078 ;; Defined at:
  2079 ;;		line 118 in file "main.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;		None
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;  input           2   30[COMRAM] unsigned char [2]
  2084 ;; Return value:  Size  Location     Type
  2085 ;;		None               void
  2086 ;; Registers used:
  2087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2095 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2096 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2097 ;;Total ram usage:       16 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; Hardware stack levels required when called:    2
  2100 ;; This function calls:
  2101 ;;		_atoi
  2102 ;;		_pwm
  2103 ;; This function is called by:
  2104 ;;		Interrupt level 2
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	intcode
  2109  000008                     __pintcode:
  2110                           	opt stack 0
  2111  000008                     _high_isr:
  2112                           	opt stack 26
  2113                           
  2114                           ; BSR set to: 15
  2115                           ;incstack = 0
  2116  000008  CFFA F011          	movff	pclath,??_high_isr
  2117  00000C  CFFB F012          	movff	pclatu,??_high_isr+1
  2118  000010  CFE9 F013          	movff	fsr0l,??_high_isr+2
  2119  000014  CFEA F014          	movff	fsr0h,??_high_isr+3
  2120  000018  CFE1 F015          	movff	fsr1l,??_high_isr+4
  2121  00001C  CFE2 F016          	movff	fsr1h,??_high_isr+5
  2122  000020  CFD9 F017          	movff	fsr2l,??_high_isr+6
  2123  000024  CFDA F018          	movff	fsr2h,??_high_isr+7
  2124  000028  CFF3 F019          	movff	prodl,??_high_isr+8
  2125  00002C  CFF4 F01A          	movff	prodh,??_high_isr+9
  2126  000030  CFF6 F01B          	movff	tblptrl,??_high_isr+10
  2127  000034  CFF7 F01C          	movff	tblptrh,??_high_isr+11
  2128  000038  CFF8 F01D          	movff	tblptru,??_high_isr+12
  2129  00003C  CFF5 F01E          	movff	tablat,??_high_isr+13
  2130                           
  2131                           ;main.c: 119: RC2IF = 0;
  2132  000040  9AA4               	bcf	4004,5,c	;volatile
  2133                           
  2134                           ;main.c: 122: char input[2] = "";
  2135  000042  C024  F01F         	movff	high_isr@F19158,high_isr@input
  2136  000046  C025  F020         	movff	high_isr@F19158+1,high_isr@input+1
  2137                           
  2138                           ;main.c: 123: input[0] = RCREG2;
  2139  00004A  CF7A F01F          	movff	3962,high_isr@input	;volatile
  2140                           
  2141                           ;main.c: 125: if (beginR==1 | beginG==1 | beginB==1)
  2142  00004E  0428               	decf	_beginR,w,c
  2143  000050  B4D8               	btfsc	status,2,c
  2144  000052  D006               	goto	i2l1535
  2145  000054  0427               	decf	_beginG,w,c
  2146  000056  B4D8               	btfsc	status,2,c
  2147  000058  D003               	goto	i2l1535
  2148  00005A  0426               	decf	_beginB,w,c
  2149  00005C  A4D8               	btfss	status,2,c
  2150  00005E  D05C               	goto	i2l1573
  2151  000060                     i2l1535:
  2152                           
  2153                           ;main.c: 126: {
  2154                           ;main.c: 127: if (input[0]!='R' & input[0]!='G' & input[0]!='B')
  2155  000060  0E52               	movlw	82
  2156  000062  181F               	xorwf	high_isr@input,w,c
  2157  000064  B4D8               	btfsc	status,2,c
  2158  000066  D014               	goto	i2l1545
  2159  000068  0E47               	movlw	71
  2160  00006A  181F               	xorwf	high_isr@input,w,c
  2161  00006C  B4D8               	btfsc	status,2,c
  2162  00006E  D010               	goto	i2l1545
  2163  000070  0E42               	movlw	66
  2164  000072  181F               	xorwf	high_isr@input,w,c
  2165  000074  B4D8               	btfsc	status,2,c
  2166  000076  D00C               	goto	i2l1545
  2167                           
  2168                           ;main.c: 128: {
  2169                           ;main.c: 129: buffer[compteur]=input[0];
  2170  000078  5029               	movf	_compteur,w,c
  2171  00007A  0D01               	mullw	1
  2172  00007C  0E2A               	movlw	low _buffer
  2173  00007E  24F3               	addwf	prodl,w,c
  2174  000080  6ED9               	movwf	fsr2l,c
  2175  000082  0E00               	movlw	high _buffer
  2176  000084  20F4               	addwfc	prodh,w,c
  2177  000086  6EDA               	movwf	fsr2h,c
  2178  000088  C01F  FFDF         	movff	high_isr@input,indf2
  2179                           
  2180                           ;main.c: 130: compteur+=1;
  2181  00008C  2A29               	incf	_compteur,f,c
  2182                           
  2183                           ;main.c: 131: }
  2184  00008E  D044               	goto	i2l1573
  2185  000090                     i2l1545:
  2186                           
  2187                           ;main.c: 133: else
  2188                           ;main.c: 134: {
  2189                           ;main.c: 135: if (beginR==1)
  2190  000090  0428               	decf	_beginR,w,c
  2191  000092  A4D8               	btfss	status,2,c
  2192  000094  D00E               	goto	i2l1549
  2193                           
  2194                           ;main.c: 136: pwm('R',atoi(buffer));
  2195  000096  0E2A               	movlw	low _buffer
  2196  000098  6E07               	movwf	atoi@s,c
  2197  00009A  0E00               	movlw	high _buffer
  2198  00009C  6E08               	movwf	atoi@s+1,c
  2199  00009E  ECD6  F008         	call	_atoi	;wreg free
  2200  0000A2  C007  F00E         	movff	?_atoi,pwm@dutycycle
  2201  0000A6  C008  F00F         	movff	?_atoi+1,pwm@dutycycle+1
  2202  0000AA  0E52               	movlw	82
  2203  0000AC  EC8B  F009         	call	_pwm
  2204  0000B0  D000               	goto	i2l1549
  2205  0000B2                     i2l1549:
  2206                           
  2207                           ;main.c: 137: beginR=0;
  2208  0000B2  0E00               	movlw	0
  2209  0000B4  6E28               	movwf	_beginR,c
  2210                           
  2211                           ;main.c: 138: if (beginG==1)
  2212  0000B6  0427               	decf	_beginG,w,c
  2213  0000B8  A4D8               	btfss	status,2,c
  2214  0000BA  D00E               	goto	i2l1555
  2215                           
  2216                           ;main.c: 139: pwm('G',atoi(buffer));
  2217  0000BC  0E2A               	movlw	low _buffer
  2218  0000BE  6E07               	movwf	atoi@s,c
  2219  0000C0  0E00               	movlw	high _buffer
  2220  0000C2  6E08               	movwf	atoi@s+1,c
  2221  0000C4  ECD6  F008         	call	_atoi	;wreg free
  2222  0000C8  C007  F00E         	movff	?_atoi,pwm@dutycycle
  2223  0000CC  C008  F00F         	movff	?_atoi+1,pwm@dutycycle+1
  2224  0000D0  0E47               	movlw	71
  2225  0000D2  EC8B  F009         	call	_pwm
  2226  0000D6  D000               	goto	i2l1555
  2227  0000D8                     i2l1555:
  2228                           
  2229                           ;main.c: 140: beginG=0;
  2230  0000D8  0E00               	movlw	0
  2231  0000DA  6E27               	movwf	_beginG,c
  2232                           
  2233                           ;main.c: 141: if (beginB==1)
  2234  0000DC  0426               	decf	_beginB,w,c
  2235  0000DE  A4D8               	btfss	status,2,c
  2236  0000E0  D00E               	goto	i2l1561
  2237                           
  2238                           ;main.c: 142: pwm('B',atoi(buffer));
  2239  0000E2  0E2A               	movlw	low _buffer
  2240  0000E4  6E07               	movwf	atoi@s,c
  2241  0000E6  0E00               	movlw	high _buffer
  2242  0000E8  6E08               	movwf	atoi@s+1,c
  2243  0000EA  ECD6  F008         	call	_atoi	;wreg free
  2244  0000EE  C007  F00E         	movff	?_atoi,pwm@dutycycle
  2245  0000F2  C008  F00F         	movff	?_atoi+1,pwm@dutycycle+1
  2246  0000F6  0E42               	movlw	66
  2247  0000F8  EC8B  F009         	call	_pwm
  2248  0000FC  D000               	goto	i2l1561
  2249  0000FE                     i2l1561:
  2250                           
  2251                           ;main.c: 143: beginB=0;
  2252  0000FE  0E00               	movlw	0
  2253  000100  6E26               	movwf	_beginB,c
  2254                           
  2255                           ;main.c: 146: compteur=0;
  2256  000102  0E00               	movlw	0
  2257  000104  6E29               	movwf	_compteur,c
  2258                           
  2259                           ;main.c: 147: buffer[3]='\0';
  2260  000106  0E00               	movlw	0
  2261  000108  6E2D               	movwf	_buffer+3,c
  2262                           
  2263                           ;main.c: 148: buffer[2]='\0';
  2264  00010A  0E00               	movlw	0
  2265  00010C  6E2C               	movwf	_buffer+2,c
  2266                           
  2267                           ;main.c: 149: buffer[1]='\0';
  2268  00010E  0E00               	movlw	0
  2269  000110  6E2B               	movwf	_buffer+1,c
  2270                           
  2271                           ;main.c: 150: buffer[0]='\0';
  2272  000112  0E00               	movlw	0
  2273  000114  6E2A               	movwf	_buffer,c
  2274  000116  D000               	goto	i2l1573
  2275  000118                     i2l1573:
  2276                           
  2277                           ;main.c: 151: }
  2278                           ;main.c: 152: }
  2279                           ;main.c: 154: if (input[0]=='R')
  2280  000118  0E52               	movlw	82
  2281  00011A  181F               	xorwf	high_isr@input,w,c
  2282  00011C  A4D8               	btfss	status,2,c
  2283  00011E  D003               	goto	i2l1577
  2284                           
  2285                           ;main.c: 155: beginR=1;
  2286  000120  0E01               	movlw	1
  2287  000122  6E28               	movwf	_beginR,c
  2288  000124  D000               	goto	i2l1577
  2289  000126                     i2l1577:
  2290                           
  2291                           ;main.c: 156: if (input[0]=='G')
  2292  000126  0E47               	movlw	71
  2293  000128  181F               	xorwf	high_isr@input,w,c
  2294  00012A  A4D8               	btfss	status,2,c
  2295  00012C  D003               	goto	i2l1581
  2296                           
  2297                           ;main.c: 157: beginG=1;
  2298  00012E  0E01               	movlw	1
  2299  000130  6E27               	movwf	_beginG,c
  2300  000132  D000               	goto	i2l1581
  2301  000134                     i2l1581:
  2302                           
  2303                           ;main.c: 158: if (input[0]=='B')
  2304  000134  0E42               	movlw	66
  2305  000136  181F               	xorwf	high_isr@input,w,c
  2306  000138  A4D8               	btfss	status,2,c
  2307  00013A  D003               	goto	i2l146
  2308                           
  2309                           ;main.c: 159: beginB=1;
  2310  00013C  0E01               	movlw	1
  2311  00013E  6E26               	movwf	_beginB,c
  2312  000140  D000               	goto	i2l146
  2313  000142                     i2l146:
  2314  000142  C01E  FFF5         	movff	??_high_isr+13,tablat
  2315  000146  C01D  FFF8         	movff	??_high_isr+12,tblptru
  2316  00014A  C01C  FFF7         	movff	??_high_isr+11,tblptrh
  2317  00014E  C01B  FFF6         	movff	??_high_isr+10,tblptrl
  2318  000152  C01A  FFF4         	movff	??_high_isr+9,prodh
  2319  000156  C019  FFF3         	movff	??_high_isr+8,prodl
  2320  00015A  C018  FFDA         	movff	??_high_isr+7,fsr2h
  2321  00015E  C017  FFD9         	movff	??_high_isr+6,fsr2l
  2322  000162  C016  FFE2         	movff	??_high_isr+5,fsr1h
  2323  000166  C015  FFE1         	movff	??_high_isr+4,fsr1l
  2324  00016A  C014  FFEA         	movff	??_high_isr+3,fsr0h
  2325  00016E  C013  FFE9         	movff	??_high_isr+2,fsr0l
  2326  000172  C012  FFFB         	movff	??_high_isr+1,pclatu
  2327  000176  C011  FFFA         	movff	??_high_isr,pclath
  2328  00017A  0011               	retfie		f
  2329  00017C                     __end_of_high_isr:
  2330                           	opt stack 0
  2331                           pclatu	equ	0xFFB
  2332                           pclath	equ	0xFFA
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           postinc0	equ	0xFEE
  2341                           fsr0h	equ	0xFEA
  2342                           fsr0l	equ	0xFE9
  2343                           wreg	equ	0xFE8
  2344                           indf1	equ	0xFE7
  2345                           postdec1	equ	0xFE5
  2346                           plusw1	equ	0xFE3
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           plusw2	equ	0xFDB
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _pwm *****************
  2358 ;; Defined at:
  2359 ;;		line 8 in file "converter.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  color           1    wreg     unsigned char 
  2362 ;;  dutycycle       2   13[COMRAM] int 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  color           1   15[COMRAM] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;		None               void
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2378 ;;Total ram usage:        3 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    1
  2381 ;; This function calls:
  2382 ;;		___awdiv
  2383 ;; This function is called by:
  2384 ;;		_high_isr
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text11
  2389  001316                     __ptext11:
  2390                           	opt stack 0
  2391  001316                     _pwm:
  2392                           	opt stack 26
  2393                           
  2394                           ;incstack = 0
  2395                           ;pwm@color stored from wreg
  2396  001316  6E10               	movwf	pwm@color,c
  2397                           
  2398                           ;converter.c: 9: switch(color){
  2399  001318  D036               	goto	i2l1443
  2400  00131A                     i2l1423:
  2401                           
  2402                           ;converter.c: 11: CCPR2L=dutycycle/4;
  2403  00131A  C00E  F001         	movff	pwm@dutycycle,___awdiv@dividend
  2404  00131E  C00F  F002         	movff	pwm@dutycycle+1,___awdiv@dividend+1
  2405  001322  0E00               	movlw	0
  2406  001324  6E04               	movwf	___awdiv@divisor+1,c
  2407  001326  0E04               	movlw	4
  2408  001328  6E03               	movwf	___awdiv@divisor,c
  2409  00132A  EC40  F009         	call	___awdiv	;wreg free
  2410  00132E  5001               	movf	?___awdiv,w,c
  2411  001330  010F               	movlb	15	; () banked
  2412  001332  6F51               	movwf	81,b	;volatile
  2413                           
  2414                           ; BSR set to: 15
  2415                           ;converter.c: 12: DC2B1=(dutycycle/2)%1;
  2416  001334  010F               	movlb	15	; () banked
  2417  001336  9B50               	bcf	80,5,b	;volatile
  2418                           
  2419                           ; BSR set to: 15
  2420                           ;converter.c: 13: DC2B0=dutycycle%1;
  2421  001338  010F               	movlb	15	; () banked
  2422  00133A  9950               	bcf	80,4,b	;volatile
  2423                           
  2424                           ;converter.c: 14: break;
  2425  00133C  0012               	return	
  2426  00133E                     i2l1429:
  2427                           
  2428                           ;converter.c: 16: CCPR3L=dutycycle/4;
  2429  00133E  C00E  F001         	movff	pwm@dutycycle,___awdiv@dividend
  2430  001342  C00F  F002         	movff	pwm@dutycycle+1,___awdiv@dividend+1
  2431  001346  0E00               	movlw	0
  2432  001348  6E04               	movwf	___awdiv@divisor+1,c
  2433  00134A  0E04               	movlw	4
  2434  00134C  6E03               	movwf	___awdiv@divisor,c
  2435  00134E  EC40  F009         	call	___awdiv	;wreg free
  2436  001352  5001               	movf	?___awdiv,w,c
  2437  001354  010F               	movlb	15	; () banked
  2438  001356  6F4E               	movwf	78,b	;volatile
  2439                           
  2440                           ; BSR set to: 15
  2441                           ;converter.c: 17: DC3B1=(dutycycle/2)%1;
  2442  001358  010F               	movlb	15	; () banked
  2443  00135A  9B4D               	bcf	77,5,b	;volatile
  2444                           
  2445                           ; BSR set to: 15
  2446                           ;converter.c: 18: DC3B0=0;
  2447  00135C  010F               	movlb	15	; () banked
  2448  00135E  994D               	bcf	77,4,b	;volatile
  2449                           
  2450                           ;converter.c: 19: break;
  2451  001360  0012               	return	
  2452  001362                     i2l1435:
  2453                           
  2454                           ;converter.c: 21: CCPR4L=dutycycle/4;
  2455  001362  C00E  F001         	movff	pwm@dutycycle,___awdiv@dividend
  2456  001366  C00F  F002         	movff	pwm@dutycycle+1,___awdiv@dividend+1
  2457  00136A  0E00               	movlw	0
  2458  00136C  6E04               	movwf	___awdiv@divisor+1,c
  2459  00136E  0E04               	movlw	4
  2460  001370  6E03               	movwf	___awdiv@divisor,c
  2461  001372  EC40  F009         	call	___awdiv	;wreg free
  2462  001376  5001               	movf	?___awdiv,w,c
  2463  001378  010F               	movlb	15	; () banked
  2464  00137A  6F4B               	movwf	75,b	;volatile
  2465                           
  2466                           ; BSR set to: 15
  2467                           ;converter.c: 22: DC4B1=(dutycycle/2)%1;
  2468  00137C  010F               	movlb	15	; () banked
  2469  00137E  9B4A               	bcf	74,5,b	;volatile
  2470                           
  2471                           ; BSR set to: 15
  2472                           ;converter.c: 23: DC4B0=dutycycle%1;
  2473  001380  010F               	movlb	15	; () banked
  2474  001382  994A               	bcf	74,4,b	;volatile
  2475                           
  2476                           ; BSR set to: 15
  2477                           ;converter.c: 25: }
  2478                           
  2479                           ;converter.c: 24: break;
  2480  001384  0012               	return	
  2481  001386                     i2l1443:
  2482  001386  5010               	movf	pwm@color,w,c
  2483                           
  2484                           ; Switch size 1, requested type "space"
  2485                           ; Number of cases is 3, Range of values is 66 to 82
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte           10     6 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490  001388  0A42               	xorlw	66	; case 66
  2491  00138A  B4D8               	btfsc	status,2,c
  2492  00138C  D7C6               	goto	i2l1423
  2493  00138E  0A05               	xorlw	5	; case 71
  2494  001390  B4D8               	btfsc	status,2,c
  2495  001392  D7E7               	goto	i2l1435
  2496  001394  0A15               	xorlw	21	; case 82
  2497  001396  A4D8               	btfss	status,2,c
  2498  001398  0012               	return	
  2499  00139A  D7D1               	goto	i2l1429
  2500  00139C  0012               	return		;funcret
  2501  00139E                     __end_of_pwm:
  2502                           	opt stack 0
  2503                           pclatu	equ	0xFFB
  2504                           pclath	equ	0xFFA
  2505                           tblptru	equ	0xFF8
  2506                           tblptrh	equ	0xFF7
  2507                           tblptrl	equ	0xFF6
  2508                           tablat	equ	0xFF5
  2509                           prodh	equ	0xFF4
  2510                           prodl	equ	0xFF3
  2511                           intcon	equ	0xFF2
  2512                           postinc0	equ	0xFEE
  2513                           fsr0h	equ	0xFEA
  2514                           fsr0l	equ	0xFE9
  2515                           wreg	equ	0xFE8
  2516                           indf1	equ	0xFE7
  2517                           postdec1	equ	0xFE5
  2518                           plusw1	equ	0xFE3
  2519                           fsr1h	equ	0xFE2
  2520                           fsr1l	equ	0xFE1
  2521                           indf2	equ	0xFDF
  2522                           postinc2	equ	0xFDE
  2523                           postdec2	equ	0xFDD
  2524                           plusw2	equ	0xFDB
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function ___awdiv *****************
  2530 ;; Defined at:
  2531 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/awdiv.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  dividend        2    0[COMRAM] int 
  2534 ;;  divisor         2    2[COMRAM] int 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  quotient        2    6[COMRAM] int 
  2537 ;;  sign            1    5[COMRAM] unsigned char 
  2538 ;;  counter         1    4[COMRAM] unsigned char 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  2    0[COMRAM] int 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2549 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2551 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2552 ;;Total ram usage:        8 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; This function calls:
  2555 ;;		Nothing
  2556 ;; This function is called by:
  2557 ;;		_pwm
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text12
  2562  001280                     __ptext12:
  2563                           	opt stack 0
  2564  001280                     ___awdiv:
  2565                           	opt stack 26
  2566                           
  2567                           ;incstack = 0
  2568  001280  0E00               	movlw	0
  2569  001282  6E06               	movwf	___awdiv@sign,c
  2570  001284  AE04               	btfss	___awdiv@divisor+1,7,c
  2571  001286  D007               	goto	i2l1319
  2572  001288  6C03               	negf	___awdiv@divisor,c
  2573  00128A  1E04               	comf	___awdiv@divisor+1,f,c
  2574  00128C  B0D8               	btfsc	status,0,c
  2575  00128E  2A04               	incf	___awdiv@divisor+1,f,c
  2576  001290  0E01               	movlw	1
  2577  001292  6E06               	movwf	___awdiv@sign,c
  2578  001294  D000               	goto	i2l1319
  2579  001296                     i2l1319:
  2580  001296  AE02               	btfss	___awdiv@dividend+1,7,c
  2581  001298  D007               	goto	i2l1325
  2582  00129A  6C01               	negf	___awdiv@dividend,c
  2583  00129C  1E02               	comf	___awdiv@dividend+1,f,c
  2584  00129E  B0D8               	btfsc	status,0,c
  2585  0012A0  2A02               	incf	___awdiv@dividend+1,f,c
  2586  0012A2  0E01               	movlw	1
  2587  0012A4  1A06               	xorwf	___awdiv@sign,f,c
  2588  0012A6  D000               	goto	i2l1325
  2589  0012A8                     i2l1325:
  2590  0012A8  0E00               	movlw	0
  2591  0012AA  6E08               	movwf	___awdiv@quotient+1,c
  2592  0012AC  0E00               	movlw	0
  2593  0012AE  6E07               	movwf	___awdiv@quotient,c
  2594  0012B0  5003               	movf	___awdiv@divisor,w,c
  2595  0012B2  1004               	iorwf	___awdiv@divisor+1,w,c
  2596  0012B4  B4D8               	btfsc	status,2,c
  2597  0012B6  D021               	goto	i2l1347
  2598  0012B8  0E01               	movlw	1
  2599  0012BA  6E05               	movwf	___awdiv@counter,c
  2600  0012BC  D005               	goto	i2l1333
  2601  0012BE                     i2l1331:
  2602  0012BE  90D8               	bcf	status,0,c
  2603  0012C0  3603               	rlcf	___awdiv@divisor,f,c
  2604  0012C2  3604               	rlcf	___awdiv@divisor+1,f,c
  2605  0012C4  2A05               	incf	___awdiv@counter,f,c
  2606  0012C6  D000               	goto	i2l1333
  2607  0012C8                     i2l1333:
  2608  0012C8  BE04               	btfsc	___awdiv@divisor+1,7,c
  2609  0012CA  D002               	goto	i2l1335
  2610  0012CC  D7F8               	goto	i2l1331
  2611  0012CE  D000               	goto	i2l1335
  2612  0012D0                     i2l1335:
  2613  0012D0  90D8               	bcf	status,0,c
  2614  0012D2  3607               	rlcf	___awdiv@quotient,f,c
  2615  0012D4  3608               	rlcf	___awdiv@quotient+1,f,c
  2616  0012D6  5003               	movf	___awdiv@divisor,w,c
  2617  0012D8  5C01               	subwf	___awdiv@dividend,w,c
  2618  0012DA  5004               	movf	___awdiv@divisor+1,w,c
  2619  0012DC  5802               	subwfb	___awdiv@dividend+1,w,c
  2620  0012DE  A0D8               	btfss	status,0,c
  2621  0012E0  D006               	goto	i2l1343
  2622  0012E2  5003               	movf	___awdiv@divisor,w,c
  2623  0012E4  5E01               	subwf	___awdiv@dividend,f,c
  2624  0012E6  5004               	movf	___awdiv@divisor+1,w,c
  2625  0012E8  5A02               	subwfb	___awdiv@dividend+1,f,c
  2626  0012EA  8007               	bsf	___awdiv@quotient,0,c
  2627  0012EC  D000               	goto	i2l1343
  2628  0012EE                     i2l1343:
  2629  0012EE  90D8               	bcf	status,0,c
  2630  0012F0  3204               	rrcf	___awdiv@divisor+1,f,c
  2631  0012F2  3203               	rrcf	___awdiv@divisor,f,c
  2632  0012F4  2E05               	decfsz	___awdiv@counter,f,c
  2633  0012F6  D7EC               	goto	i2l1335
  2634  0012F8  D000               	goto	i2l1347
  2635  0012FA                     i2l1347:
  2636  0012FA  5006               	movf	___awdiv@sign,w,c
  2637  0012FC  B4D8               	btfsc	status,2,c
  2638  0012FE  D005               	goto	i2l1351
  2639  001300  6C07               	negf	___awdiv@quotient,c
  2640  001302  1E08               	comf	___awdiv@quotient+1,f,c
  2641  001304  B0D8               	btfsc	status,0,c
  2642  001306  2A08               	incf	___awdiv@quotient+1,f,c
  2643  001308  D000               	goto	i2l1351
  2644  00130A                     i2l1351:
  2645  00130A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2646  00130E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2647  001312  0012               	return	
  2648  001314  0012               	return		;funcret
  2649  001316                     __end_of___awdiv:
  2650                           	opt stack 0
  2651                           pclatu	equ	0xFFB
  2652                           pclath	equ	0xFFA
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           fsr0h	equ	0xFEA
  2662                           fsr0l	equ	0xFE9
  2663                           wreg	equ	0xFE8
  2664                           indf1	equ	0xFE7
  2665                           postdec1	equ	0xFE5
  2666                           plusw1	equ	0xFE3
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           indf2	equ	0xFDF
  2670                           postinc2	equ	0xFDE
  2671                           postdec2	equ	0xFDD
  2672                           plusw2	equ	0xFDB
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _atoi *****************
  2678 ;; Defined at:
  2679 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/atoi.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2682 ;;		 -> buffer(16), 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  a               2   11[COMRAM] int 
  2685 ;;  sign            1   10[COMRAM] unsigned char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  2    6[COMRAM] int 
  2688 ;; Registers used:
  2689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;Total ram usage:        7 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    1
  2702 ;; This function calls:
  2703 ;;		___wmul
  2704 ;;		_isdigit
  2705 ;; This function is called by:
  2706 ;;		_high_isr
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text13
  2711  0011AC                     __ptext13:
  2712                           	opt stack 0
  2713  0011AC                     _atoi:
  2714                           	opt stack 26
  2715                           
  2716                           ;incstack = 0
  2717  0011AC  D003               	goto	i2l1397
  2718  0011AE                     i2l1395:
  2719  0011AE  4A07               	infsnz	atoi@s,f,c
  2720  0011B0  2A08               	incf	atoi@s+1,f,c
  2721  0011B2  D000               	goto	i2l1397
  2722  0011B4                     i2l1397:
  2723  0011B4  C007  FFD9         	movff	atoi@s,fsr2l
  2724  0011B8  C008  FFDA         	movff	atoi@s+1,fsr2h
  2725  0011BC  0E20               	movlw	32
  2726  0011BE  18DE               	xorwf	postinc2,w,c
  2727  0011C0  B4D8               	btfsc	status,2,c
  2728  0011C2  D7F5               	goto	i2l1395
  2729  0011C4  C007  FFD9         	movff	atoi@s,fsr2l
  2730  0011C8  C008  FFDA         	movff	atoi@s+1,fsr2h
  2731  0011CC  0E09               	movlw	9
  2732  0011CE  18DE               	xorwf	postinc2,w,c
  2733  0011D0  B4D8               	btfsc	status,2,c
  2734  0011D2  D7ED               	goto	i2l1395
  2735  0011D4  0E00               	movlw	0
  2736  0011D6  6E0D               	movwf	atoi@a+1,c
  2737  0011D8  0E00               	movlw	0
  2738  0011DA  6E0C               	movwf	atoi@a,c
  2739  0011DC  0E00               	movlw	0
  2740  0011DE  6E0B               	movwf	atoi@sign,c
  2741  0011E0  C007  FFD9         	movff	atoi@s,fsr2l
  2742  0011E4  C008  FFDA         	movff	atoi@s+1,fsr2h
  2743  0011E8  0E2D               	movlw	45
  2744  0011EA  18DE               	xorwf	postinc2,w,c
  2745  0011EC  A4D8               	btfss	status,2,c
  2746  0011EE  D002               	goto	i2l1407
  2747  0011F0  2A0B               	incf	atoi@sign,f,c
  2748  0011F2  D025               	goto	i2l1413
  2749  0011F4                     i2l1407:
  2750  0011F4  C007  FFD9         	movff	atoi@s,fsr2l
  2751  0011F8  C008  FFDA         	movff	atoi@s+1,fsr2h
  2752  0011FC  0E2B               	movlw	43
  2753  0011FE  18DE               	xorwf	postinc2,w,c
  2754  001200  A4D8               	btfss	status,2,c
  2755  001202  D020               	goto	i2l1415
  2756  001204  D01C               	goto	i2l1413
  2757  001206  D01E               	goto	i2l1415
  2758  001208                     i2l1411:
  2759  001208  C00C  F001         	movff	atoi@a,___wmul@multiplier
  2760  00120C  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  2761  001210  0E00               	movlw	0
  2762  001212  6E04               	movwf	___wmul@multiplicand+1,c
  2763  001214  0E0A               	movlw	10
  2764  001216  6E03               	movwf	___wmul@multiplicand,c
  2765  001218  EC03  F00B         	call	___wmul	;wreg free
  2766  00121C  C007  FFD9         	movff	atoi@s,fsr2l
  2767  001220  C008  FFDA         	movff	atoi@s+1,fsr2h
  2768  001224  50DF               	movf	indf2,w,c
  2769  001226  6E09               	movwf	??_atoi& (0+255),c
  2770  001228  6A0A               	clrf	(??_atoi+1)& (0+255),c
  2771  00122A  5001               	movf	?___wmul,w,c
  2772  00122C  2609               	addwf	??_atoi,f,c
  2773  00122E  5002               	movf	?___wmul+1,w,c
  2774  001230  220A               	addwfc	??_atoi+1,f,c
  2775  001232  0ED0               	movlw	208
  2776  001234  2409               	addwf	??_atoi,w,c
  2777  001236  6E0C               	movwf	atoi@a,c
  2778  001238  0EFF               	movlw	255
  2779  00123A  200A               	addwfc	??_atoi+1,w,c
  2780  00123C  6E0D               	movwf	atoi@a+1,c
  2781  00123E                     i2l1413:
  2782  00123E  4A07               	infsnz	atoi@s,f,c
  2783  001240  2A08               	incf	atoi@s+1,f,c
  2784  001242  D000               	goto	i2l1415
  2785  001244                     i2l1415:
  2786  001244  C007  FFD9         	movff	atoi@s,fsr2l
  2787  001248  C008  FFDA         	movff	atoi@s+1,fsr2h
  2788  00124C  50DF               	movf	indf2,w,c
  2789  00124E  EC17  F00B         	call	_isdigit
  2790  001252  B0D8               	btfsc	status,0,c
  2791  001254  D7D9               	goto	i2l1411
  2792  001256  500B               	movf	atoi@sign,w,c
  2793  001258  B4D8               	btfsc	status,2,c
  2794  00125A  D00D               	goto	i2l426
  2795  00125C  C00C  F009         	movff	atoi@a,??_atoi
  2796  001260  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  2797  001264  1E09               	comf	??_atoi,f,c
  2798  001266  1E0A               	comf	??_atoi+1,f,c
  2799  001268  4A09               	infsnz	??_atoi,f,c
  2800  00126A  2A0A               	incf	??_atoi+1,f,c
  2801  00126C  C009  F007         	movff	??_atoi,?_atoi
  2802  001270  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2803  001274  0012               	return	
  2804  001276                     i2l426:
  2805  001276  C00C  F007         	movff	atoi@a,?_atoi
  2806  00127A  C00D  F008         	movff	atoi@a+1,?_atoi+1
  2807  00127E  0012               	return		;funcret
  2808  001280                     __end_of_atoi:
  2809                           	opt stack 0
  2810                           pclatu	equ	0xFFB
  2811                           pclath	equ	0xFFA
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           intcon	equ	0xFF2
  2819                           postinc0	equ	0xFEE
  2820                           fsr0h	equ	0xFEA
  2821                           fsr0l	equ	0xFE9
  2822                           wreg	equ	0xFE8
  2823                           indf1	equ	0xFE7
  2824                           postdec1	equ	0xFE5
  2825                           plusw1	equ	0xFE3
  2826                           fsr1h	equ	0xFE2
  2827                           fsr1l	equ	0xFE1
  2828                           indf2	equ	0xFDF
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           plusw2	equ	0xFDB
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _isdigit *****************
  2837 ;; Defined at:
  2838 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  c               1    wreg     unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  c               1    2[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;		None               void
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2856 ;;Total ram usage:        3 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_atoi
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text14
  2866  00162E                     __ptext14:
  2867                           	opt stack 0
  2868  00162E                     _isdigit:
  2869                           	opt stack 26
  2870                           
  2871                           ;incstack = 0
  2872                           ;isdigit@c stored from wreg
  2873  00162E  6E03               	movwf	isdigit@c,c
  2874  001630  0E00               	movlw	0
  2875  001632  6E02               	movwf	_isdigit$878,c
  2876  001634  0E3A               	movlw	58
  2877  001636  6003               	cpfslt	isdigit@c,c
  2878  001638  D006               	goto	i2l1307
  2879  00163A  0E2F               	movlw	47
  2880  00163C  6403               	cpfsgt	isdigit@c,c
  2881  00163E  D003               	goto	i2l1307
  2882  001640  0E01               	movlw	1
  2883  001642  6E02               	movwf	_isdigit$878,c
  2884  001644  D000               	goto	i2l1307
  2885  001646                     i2l1307:
  2886  001646  C002  F001         	movff	_isdigit$878,??_isdigit
  2887  00164A  3001               	rrcf	??_isdigit,w,c
  2888  00164C  0012               	return	
  2889  00164E  0012               	return		;funcret
  2890  001650                     __end_of_isdigit:
  2891                           	opt stack 0
  2892                           pclatu	equ	0xFFB
  2893                           pclath	equ	0xFFA
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           postinc0	equ	0xFEE
  2902                           fsr0h	equ	0xFEA
  2903                           fsr0l	equ	0xFE9
  2904                           wreg	equ	0xFE8
  2905                           indf1	equ	0xFE7
  2906                           postdec1	equ	0xFE5
  2907                           plusw1	equ	0xFE3
  2908                           fsr1h	equ	0xFE2
  2909                           fsr1l	equ	0xFE1
  2910                           indf2	equ	0xFDF
  2911                           postinc2	equ	0xFDE
  2912                           postdec2	equ	0xFDD
  2913                           plusw2	equ	0xFDB
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function ___wmul *****************
  2919 ;; Defined at:
  2920 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  multiplier      2    0[COMRAM] unsigned int 
  2923 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  product         2    4[COMRAM] unsigned int 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  2    0[COMRAM] unsigned int 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, prodl, prodh
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2936 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2938 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2939 ;;Total ram usage:        6 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_atoi
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text15
  2949  001606                     __ptext15:
  2950                           	opt stack 0
  2951  001606                     ___wmul:
  2952                           	opt stack 26
  2953                           
  2954                           ;incstack = 0
  2955  001606  5001               	movf	___wmul@multiplier,w,c
  2956  001608  0203               	mulwf	___wmul@multiplicand,c
  2957  00160A  CFF3 F005          	movff	prodl,___wmul@product
  2958  00160E  CFF4 F006          	movff	prodh,___wmul@product+1
  2959  001612  5001               	movf	___wmul@multiplier,w,c
  2960  001614  0204               	mulwf	___wmul@multiplicand+1,c
  2961  001616  50F3               	movf	prodl,w,c
  2962  001618  2606               	addwf	___wmul@product+1,f,c
  2963  00161A  5002               	movf	___wmul@multiplier+1,w,c
  2964  00161C  0203               	mulwf	___wmul@multiplicand,c
  2965  00161E  50F3               	movf	prodl,w,c
  2966  001620  2606               	addwf	___wmul@product+1,f,c
  2967  001622  C005  F001         	movff	___wmul@product,?___wmul
  2968  001626  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2969  00162A  0012               	return	
  2970  00162C  0012               	return		;funcret
  2971  00162E                     __end_of___wmul:
  2972                           	opt stack 0
  2973                           pclatu	equ	0xFFB
  2974                           pclath	equ	0xFFA
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           postinc0	equ	0xFEE
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           wreg	equ	0xFE8
  2986                           indf1	equ	0xFE7
  2987                           postdec1	equ	0xFE5
  2988                           plusw1	equ	0xFE3
  2989                           fsr1h	equ	0xFE2
  2990                           fsr1l	equ	0xFE1
  2991                           indf2	equ	0xFDF
  2992                           postinc2	equ	0xFDE
  2993                           postdec2	equ	0xFDD
  2994                           plusw2	equ	0xFDB
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8
  2998                           pclatu	equ	0xFFB
  2999                           pclath	equ	0xFFA
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           postinc0	equ	0xFEE
  3008                           fsr0h	equ	0xFEA
  3009                           fsr0l	equ	0xFE9
  3010                           wreg	equ	0xFE8
  3011                           indf1	equ	0xFE7
  3012                           postdec1	equ	0xFE5
  3013                           plusw1	equ	0xFE3
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           plusw2	equ	0xFDB
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024                           	psect	rparam
  3025  0000                     pclatu	equ	0xFFB
  3026                           pclath	equ	0xFFA
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           prodh	equ	0xFF4
  3032                           prodl	equ	0xFF3
  3033                           intcon	equ	0xFF2
  3034                           postinc0	equ	0xFEE
  3035                           fsr0h	equ	0xFEA
  3036                           fsr0l	equ	0xFE9
  3037                           wreg	equ	0xFE8
  3038                           indf1	equ	0xFE7
  3039                           postdec1	equ	0xFE5
  3040                           plusw1	equ	0xFE3
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           indf2	equ	0xFDF
  3044                           postinc2	equ	0xFDE
  3045                           postdec2	equ	0xFDD
  3046                           plusw2	equ	0xFDB
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    10
    Data        6
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      63
    BANK0           160     63     111
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 16
		 -> buffer(COMRAM[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@msg(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeStringToUART@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_4(CODE[3]), main@msg(BANK0[32]), 


Critical Paths under _main in COMRAM

    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _high_isr in COMRAM

    _high_isr->_pwm
    _pwm->_atoi
    _atoi->___wmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    36      5    2332
                                             22 BANK0     41    36      5
                     _initialisation
                            _readADC
                            _sprintf
                  _writeStringToUART
 ---------------------------------------------------------------------------------
 (1) _writeStringToUART                                    2     0      2     257
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    1689
                                              9 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              4 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                             32 COMRAM     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              6     4      2     102
                                             32 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0       0
                            _initADC
                          _initComms
                            _initPWM
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initComms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _high_isr                                            16    16      0    1741
                                             16 COMRAM    16    16      0
                               _atoi
                                _pwm
 ---------------------------------------------------------------------------------
 (4) _pwm                                                  3     1      2     865
                                             13 COMRAM     3     1      2
                            ___awdiv
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     618
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2     720
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     265
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialisation
     _initADC
     _initComms
     _initPWM
   _readADC
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _readADC (ARG)
   _writeStringToUART

 _high_isr (ROOT)
   _atoi
     ___wmul
     _isdigit
   _pwm
     ___awdiv
     _atoi (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      6F       5       69.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      3F       1       66.3%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE       6        0.0%
DATA                 0      0      AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Apr 25 15:32:00 2015

                         _B 003A                           _G 003C                           _R 003E  
              ___awdiv@sign 0006         ___wmul@multiplicand 0003                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         l235 0FD6                         l181 1420  
                       l173 14F2                         l183 1424                         l184 142A  
                       l186 145E                         l187 1462                         l782 140A  
                       l792 14E4                __CFG_CPB$OFF 000000                         _PR2 000FCB  
              __CFG_CPD$OFF 000000                         u800 1542                         u807 1538  
                       u790 1518                         u797 150E                         _pwm 1316  
                       prod 000FF3                         wreg 000FE8                  _TXSTA2bits 000FBA  
                      l1621 13B8                        l1525 1520                        l1623 13C4  
                      l1703 0FD0                        l1633 13FC                        l1625 13CE  
                      l1641 1496                        l1713 103A                        l1643 14A4  
                      l1707 0FDC                        l1715 104A                        l1645 14AE  
                      l1717 106A                        l1733 10DA                        l1735 10EC  
                      l1727 10A4                        l1665 1452                        l1657 1430  
                      l1649 14D4                        l1681 0F3E                        l1729 10B6  
                      l1667 1456                        l1659 1448                        l1683 0F4A  
                      l1675 0F20                        l1695 0F98                        l1687 0F52  
                      l1689 0F78                        l1699 0FA6                        _ADON 007E10  
                      _CHS0 007E12                        _CHS1 007E13                        ?_pwm 000E  
                      STR_1 0F0B                        STR_2 0F0B                        STR_3 0F0B  
                      STR_4 0F0D                        u1121 109A            ??_initialisation 0021  
                      _atoi 11AC                        _main 107A                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr0l 000FE9                        fsr2h 000FDA  
                      indf1 000FE7                        fsr1l 000FE1                        indf2 000FDF  
                      fsr2l 000FD9                        pclat 000FFA                        prodh 000FF4  
                      prodl 000FF3                        start 017C               __CFG_IESO$OFF 000000  
              ___param_bank 000010                       ??_pwm 0010                       _DC2B0 007A84  
                     _DC2B1 007A85                       _DC3B0 007A6C                       _DC3B1 007A6D  
                     _DC4B0 007A54                       _DC4B1 007A55                       ?_atoi 0007  
                     ?_main 0076             __end_of___awdiv 1316             ___awdiv@divisor 0003  
                     _RC2IF 007D25             __end_of___lwdiv 1414             __end_of___lwmod 14EE  
                     i2l146 0142                       i2l426 1276             ___awdiv@counter 0005  
                     _VCFG0 007E0C                       _VCFG1 007E0D                       _VNCFG 007E0B  
                     _TRISC 000F94               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initADC 166C             __end_of_readADC 1482  
            __CFG_EBTRB$OFF 000000             __end_of_initPWM 159C             __end_of_dpowers 0F0B  
           __end_of_isdigit 1650                       atoi@a 000C                       atoi@s 0007  
                     tablat 000FF5           _writeStringToUART 14EE                       plusw1 000FE3  
                     plusw2 000FDB                       status 000FD8             __end_of_sprintf 107A  
        ?_writeStringToUART 0021              __CFG_MCLRE$OFF 000000             __initialization 159C  
              __end_of_atoi 1280                __end_of_main 11AC         ??_writeStringToUART 0023  
             high_isr@input 001F                      ??_atoi 0009                      ??_main 0024  
             __activetblptr 000002              __CFG_RETEN$OFF 000000                      _CCP2M2 007A82  
                    _CCP2M3 007A83                      _CCP3M2 007A6A                      _CCP3M3 007A6B  
                    _CCP4M2 007A52                      _CCP4M3 007A53                      _ADRESH 000FC4  
                    _ADRESL 000FC3                      _CCPR2L 000F51                      _CCPR3L 000F4E  
                    _CCPR4L 000F4B            ___awdiv@dividend 0001   __end_of_writeStringToUART 154A  
                    _ANSEL1 007AE9                      _ANSEL2 007AEA                      _ANSEL3 007AEB  
           __CFG_BBSIZ$BB2K 000000                      i2l1307 1646                      i2l1411 1208  
                    i2l1331 12BE                      i2l1413 123E                      i2l1333 12C8  
                    i2l1325 12A8                      i2l1415 1244                      i2l1407 11F4  
                    i2l1351 130A                      i2l1343 12EE                      i2l1335 12D0  
                    i2l1319 1296                      i2l1423 131A                      i2l1347 12FA  
                    i2l1435 1362                      i2l1443 1386                      i2l1429 133E  
                    i2l1535 0060                      i2l1561 00FE                      i2l1545 0090  
                    i2l1395 11AE                      i2l1555 00D8                      i2l1397 11B4  
                    i2l1581 0134                      i2l1549 00B2                      i2l1573 0118  
            __CFG_WDTEN$OFF 000000                      i2l1577 0126                      _RCREG2 000F7A  
                    _SPBRG2 000F7B                      _TMR2ON 007E52                      _TXREG2 000F79  
            __CFG_XINST$OFF 000000            __end_of_high_isr 017C                      _beginB 0026  
                    _beginG 0027                      ___wmul 1606                      _beginR 0028  
                 ??___awdiv 0005              __CFG_STVREN$ON 000000                readADC@tempo 0063  
                 ??___lwdiv 0021                   ??___lwmod 0024                      _buffer 002A  
                    clear_0 15A2                      clear_1 15AE            ___awdiv@quotient 0007  
                 ??_initADC 0021                   ??_readADC 0060                   ??_initPWM 0021  
              __pdataCOMRAM 003A                   ??_isdigit 0001                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
            high_isr@F19158 0024                   ??_sprintf 0024                  __accesstop 0060  
   __end_of__initialization 15D4               ___rparam_used 000001              __pcstackCOMRAM 0001  
__size_of_writeStringToUART 005C                  __pbssBANK0 009F             __CFG_PLLCFG$OFF 000000  
        __size_of_initComms 0028                     ?___wmul 0001                     _T2CKPS0 007E50  
                   _T2CKPS1 007E51            __CFG_CANMX$PORTB 000000                     _SPBRGH2 000F7C  
                 ?_high_isr 0001             __CFG_PWRTEN$OFF 000000                     __Hparam 0000  
                   __Lparam 0000                     ___awdiv 1280             __size_of___wmul 0028  
                   ___lwdiv 139E                     ___lwmod 1482                __psmallconst 0F00  
                   __pcinit 159C                     __ramtop 0F00                     __ptext0 107A  
                   __ptext1 14EE                     __ptext2 0F12                     __ptext3 1482  
                   __ptext4 139E                     __ptext5 1414                     __ptext6 166C  
                   __ptext7 154A                     __ptext8 15DE                     __ptext9 1650  
                   _buffer1 00BF           __end_of_initComms 1606                     _initADC 1650  
                   _readADC 1414                     _initPWM 154A                     _dpowers 0F01  
                   _isdigit 162E                __size_of_pwm 0088           __CFG_MSSPMSK$MSK7 000000  
      writeStringToUART@msg 0021                     _sprintf 0F12                     main@msg 007B  
                ??_high_isr 0011        end_of_initialization 15D4               __Lmediumconst 0000  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE     __size_of_initialisation 000E                  main@F19164 009F  
          __CFG_FOSC$INTIO2 000000                   _TRISBbits 000F93              __end_of___wmul 162E  
             __pidataCOMRAM 167A         start_initialization 159C                 __end_of_pwm 139E  
                  ??___wmul 0005                 __pbssCOMRAM 0024               __pcstackBANK0 0060  
         __size_of_high_isr 0174                 sprintf@flag 006F                 sprintf@prec 0074  
          ___lwdiv@dividend 0060                   __pintcode 0008              _initialisation 166C  
                  ?___awdiv 0001                    ?___lwdiv 0060                    ?___lwmod 0064  
                  ?_initADC 0001                    ?_readADC 0021                    ?_initPWM 0001  
               __smallconst 0F00                    _BAUDCON2 000FB9                    ?_isdigit 0001  
                 _initComms 15DE            ___lwdiv@quotient 0022                    ?_sprintf 0069  
            ___wmul@product 0005                    _PIE3bits 000FA3      __end_of_initialisation 167A  
                  _PIR3bits 000FA4                    _GO_nDONE 007E11                    _RCONbits 000FD0  
                  _TRIGSEL0 007E0E                    _TRIGSEL1 007E0F           ___wmul@multiplier 0001  
          __CFG_SOSCSEL$DIG 000000                   main@delay 009B                  ?_initComms 0001  
                 copy_data0 15C8                    __Hrparam 0000             ?_initialisation 0001  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000            __size_of___awdiv 0096  
          __size_of___lwdiv 0076            __size_of___lwmod 006C              readADC@channel 0062  
               _isdigit$878 0002                  sprintf@val 0072            __size_of_initADC 001C  
          __size_of_readADC 006E            __size_of_initPWM 0052            __size_of_isdigit 0022  
           ___lwdiv@divisor 0062             ___lwdiv@counter 0021                    __ptext11 1316  
                  __ptext12 1280                    __ptext13 11AC                    __ptext14 162E  
                  __ptext15 1606                    _high_isr 0008            __size_of_sprintf 0168  
                  _compteur 0029               __size_of_atoi 00D4               __size_of_main 0132  
                  atoi@sign 000B                    main@argc 0076                    main@argv 0078  
       __CFG_INTOSCSEL$HIGH 000000                  _INTCONbits 000FF2                 ??_initComms 0021  
                  isdigit@c 0003                    intlevel2 0000                pwm@dutycycle 000E  
                 sprintf@ap 0070                   sprintf@sp 0069            ___lwmod@dividend 0064  
                _RCSTA2bits 000FA6                    pwm@color 0010          __CFG_WDTPS$1048576 000000  
                  sprintf@c 0075                    sprintf@f 006B             ___lwmod@divisor 0066  
           ___lwmod@counter 0068         __CFG_BORPWR$ZPBORMV 000000  
